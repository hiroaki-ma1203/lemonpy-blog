<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntuインストール後の初期設定</title>
    <url>/2020/11/02/ubuntu-initial-settings/</url>
    <content><![CDATA[<h1 id="UbuntuへのSSHアクセスの設定"><a href="#UbuntuへのSSHアクセスの設定" class="headerlink" title="UbuntuへのSSHアクセスの設定"></a>UbuntuへのSSHアクセスの設定</h1><p>UbuntuにSSHで通信できなかったので設定しました。</p>
<h2 id="openssh-serverのインストール"><a href="#openssh-serverのインストール" class="headerlink" title="openssh-serverのインストール"></a>openssh-serverのインストール</h2><p>まずはOpenSSH Serverをインストールします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt install -y openssh-server</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="rootログインの禁止"><a href="#rootログインの禁止" class="headerlink" title="rootログインの禁止"></a>rootログインの禁止</h2><p>rootログインを禁止するのが一般的のようなので、特別な理由がなければ禁止しておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>下記のように一行追記</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin prohibit-password </span><br><span class="line">PermitRootLogin no  &lt;- 追記</span><br></pre></td></tr></table></figure>

<p>SSHサービスを再起動します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl restart ssh </span><br></pre></td></tr></table></figure>

<h2 id="openssh-serverが自動起動する設定になっているか確認"><a href="#openssh-serverが自動起動する設定になっているか確認" class="headerlink" title="openssh-serverが自動起動する設定になっているか確認"></a>openssh-serverが自動起動する設定になっているか確認</h2><p>OS起動時に自動でSSH Serverが立ち上がるか確認します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl is-enabled ssh </span><br><span class="line">enabled </span><br></pre></td></tr></table></figure>

<p>enabledになっていればUbuntu起動時にSSHサーバーも自動で起動します。<br>disableになっている場合は下記のコマンドで自動起動するように設定しておきます。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> ssh </span><br></pre></td></tr></table></figure>

<p>ターミナルアプリでUbuntuにログインできれば完了。</p>
<h1 id="curlのインストール"><a href="#curlのインストール" class="headerlink" title="curlのインストール"></a>curlのインストール</h1><p>curlコマンドも入ってなかったので、インストールしました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  <span class="built_in">sudo</span> apt install curl </span><br></pre></td></tr></table></figure>

<h1 id="フォルダ名の英語化"><a href="#フォルダ名の英語化" class="headerlink" title="フォルダ名の英語化"></a>フォルダ名の英語化</h1><p>インストールした直後は、ホームディレクトリ内のディレクトリ名が日本語になっています。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls </span><br><span class="line">ダウンロード  テンプレート  デスクトップ  ドキュメント  ビデオ  ピクチャ  ミュージック  公開 </span><br></pre></td></tr></table></figure>
<p>SSHで利用するときに入力が面倒なので、英語に変更しました。</p>
<p>GUIを開いて、ターミナルで下記コマンド実行します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ LANG=C xdg-user-dirs-gtk-update </span><br></pre></td></tr></table></figure>

<p>確認画面が出るので「Update Names」をクリックすると、下記のように英語の名前に切り替わります。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls </span><br><span class="line">Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos </span><br></pre></td></tr></table></figure>
<p>GUIで操作するのが面倒な場合は下記でもできるようですが、日本語のフォルダが残ってしまいました。<br>何かやり方が悪い？のか不明です。</p>
<p>$ LANG&#x3D;C xdg-user-dirs-update –force </p>
<h1 id="ネットワーク設定-IP固定"><a href="#ネットワーク設定-IP固定" class="headerlink" title="ネットワーク設定　IP固定"></a>ネットワーク設定　IP固定</h1><p>そのうち書きます</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
      </tags>
  </entry>
  <entry>
    <title>よく使うDockerコマンドの備忘録</title>
    <url>/2022/07/03/docker-commands/</url>
    <content><![CDATA[<h1 id="イメージの操作"><a href="#イメージの操作" class="headerlink" title="イメージの操作"></a>イメージの操作</h1><h2 id="イメージの取得"><a href="#イメージの取得" class="headerlink" title="イメージの取得"></a>イメージの取得</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull &lt;Name&gt;:Tag</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="イメージの表示"><a href="#イメージの表示" class="headerlink" title="イメージの表示"></a>イメージの表示</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure>

<h2 id="イメージの削除"><a href="#イメージの削除" class="headerlink" title="イメージの削除"></a>イメージの削除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rmi &lt;イメージID&gt;</span><br></pre></td></tr></table></figure>

<p>まとめて削除したい場合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<p>まとめて削除したい場合その2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image prune</span><br></pre></td></tr></table></figure>

<h1 id="コンテナ操作"><a href="#コンテナ操作" class="headerlink" title="コンテナ操作"></a>コンテナ操作</h1><h2 id="コンテナの表示"><a href="#コンテナの表示" class="headerlink" title="コンテナの表示"></a>コンテナの表示</h2><p>コンテナ一覧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure>


<p>停止したコンテナ含めて一覧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure>

<h2 id="コンテナの削除"><a href="#コンテナの削除" class="headerlink" title="コンテナの削除"></a>コンテナの削除</h2><p>コンテナ削除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>

<p>停止したコンテナ全部削除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -v $(docker ps -aq -f status=exited)</span><br></pre></td></tr></table></figure>


<p>コンテナの実行終了時に自動削除するオプション(–rm)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> &lt;イメージ名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="その他のコンテナの操作"><a href="#その他のコンテナの操作" class="headerlink" title="その他のコンテナの操作"></a>その他のコンテナの操作</h2><p>コンテナにインタラプト(-it)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it &lt;イメージ名&gt;</span><br></pre></td></tr></table></figure>

<p>コンテナをバックグラウンド実行(-d)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d &lt;イメージ名&gt;</span><br></pre></td></tr></table></figure>

<p>コンテナに環境変数を与える(-e)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -e &lt;Key&gt;=&lt;Value&gt;</span><br></pre></td></tr></table></figure>

<p>コンテナ名を指定する(–name)　※指定しない場合は自動で名前が生成される</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name &lt;Name&gt;</span><br></pre></td></tr></table></figure>

<p>コンテナにポートマッピング(-p)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p &lt;コンテナ側ポート&gt;:&lt;ホスト側ポート&gt;</span><br><span class="line">docker run -p 80:8080</span><br></pre></td></tr></table></figure>

<p>コンテナのIPアドレス確認</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker inspect &lt;コンテナID&gt; | grep IPAddress</span><br></pre></td></tr></table></figure>

<p>コンテナで変更された内容確認</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker diff &lt;コンテナID&gt;</span><br></pre></td></tr></table></figure>

<p>コンテナのログ表示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs &lt;コンテナID&gt;</span><br></pre></td></tr></table></figure>


<h2 id="コンテナとホスト間のデータやり取り"><a href="#コンテナとホスト間のデータやり取り" class="headerlink" title="コンテナとホスト間のデータやり取り"></a>コンテナとホスト間のデータやり取り</h2><p>ホストとのファイルのコピー（ホスト -&gt; コンテナ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker <span class="built_in">cp</span> &lt;ホスト側コピー元ファイルパス&gt; &lt;コンテナID&gt;:&lt;コンテナ側コピー先ファイルパス&gt;</span><br><span class="line">docker <span class="built_in">cp</span> /home/maekawa/data/scan_001.pnm 7d4f982af177:/tmp/scan_001.pnm</span><br></pre></td></tr></table></figure>

<p>ホストとのファイルのコピー（コンテナ -&gt; ホスト）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker <span class="built_in">cp</span> &lt;コンテナID&gt;:&lt;コンテナ側コピー先ファイルパス&gt; &lt;ホスト側コピー元ファイルパス&gt;</span><br><span class="line">docker <span class="built_in">cp</span> 7d4f982af177:/tmp/scan_001_ocr.pdf /home/maekawa/data/scan_001_ocr.pdf</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>環境構築</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfileの備忘録</title>
    <url>/2022/07/24/dockerfile-memo/</url>
    <content><![CDATA[<h1 id="Dockerfileについて"><a href="#Dockerfileについて" class="headerlink" title="Dockerfileについて"></a>Dockerfileについて</h1><p>Dockerfileに関するメモ書き</p>
<span id="more"></span>

<p>Dockerエンジンのインストール方法はこちら<br><a href="/2023/02/25/docker-install/" title="Dockerのインストールに関する記事">Ubuntu ServerにDockerをインストールした時のメモ</a></p>
<h2 id="基本的な記述"><a href="#基本的な記述" class="headerlink" title="基本的な記述"></a>基本的な記述</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM &lt;Image&gt;:&lt;tag&gt;</span><br><span class="line"></span><br><span class="line">COPU &lt;コピー元ファイルパス&gt; &lt;コピー先フォルダパス&gt;</span><br><span class="line"></span><br><span class="line">RUN &lt;実行するコマンド　pip installなど&gt;</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [ &lt;実行コマンド&gt; ]</span><br><span class="line"></span><br><span class="line">CMD [ &lt;実行コマンド&gt; ]</span><br></pre></td></tr></table></figure>



<h2 id="サンプル"><a href="#サンプル" class="headerlink" title="サンプル"></a>サンプル</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:22.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt upgrade -y \</span><br><span class="line">    &amp;&amp; apt install -y \</span><br><span class="line">    tesseract-ocr \</span><br><span class="line">    tesseract-ocr-jpn \</span><br><span class="line">    libtesseract-dev \</span><br><span class="line">    python3 \</span><br><span class="line">    python3-pip\</span><br><span class="line">    &amp;&amp; apt clean \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">RUN pip3 install awslambdaric</span><br><span class="line"></span><br><span class="line">ARG APP_DIR=&quot;/home/app/&quot;</span><br><span class="line">RUN mkdir -p $&#123;APP_DIR&#125;</span><br><span class="line">WORKDIR $&#123;APP_DIR&#125;</span><br><span class="line">COPY app.py ocr.py requirements.txt $&#123;APP_DIR&#125;</span><br><span class="line"></span><br><span class="line">ARG TESSDATA_DIR=&quot;/home/app/tessdata/&quot;</span><br><span class="line">RUN mkdir -p $&#123;TESSDATA_DIR&#125;</span><br><span class="line">COPY tessdata/ $&#123;TESSDATA_DIR&#125;</span><br><span class="line"></span><br><span class="line">RUN python3 -m pip install -r requirements.txt -t $&#123;APP_DIR&#125;</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [ &quot;/usr/bin/python3&quot;, &quot;-m&quot;, &quot;awslambdaric&quot; ]</span><br><span class="line">CMD [&quot;app.lambda_handler&quot;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>環境構築</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 の開発環境を Windows 10 Pro の Hyper-V に構築</title>
    <url>/2020/11/02/ubuntu-on-hyperv/</url>
    <content><![CDATA[<h1 id="このページの概略"><a href="#このページの概略" class="headerlink" title="このページの概略"></a>このページの概略</h1><p>最近、いろいろな理由からLinuxの開発環境がほしくなり、Hyper-Vを使用してUbuntuの開発環境を構築したので、その時の手順などを備忘録としてメモを残します。</p>
<p>WSLとも迷ったのですが、スナップショット機能があったほうが安心できそうだったのと、複数の環境を作りたくなると思ったのでHyper-Vにしました。</p>
<h1 id="Hyper-Vの有効化"><a href="#Hyper-Vの有効化" class="headerlink" title="Hyper-Vの有効化"></a>Hyper-Vの有効化</h1><p>まずはWindowsのHyper-V機能を有効化していきます。<br>※Windows 10 HomeではHyper-Vが使えませんので、WSLを使うかProを購入しましょう。</p>
<h2 id="Windowsのエディションの確認方法"><a href="#Windowsのエディションの確認方法" class="headerlink" title="Windowsのエディションの確認方法"></a>Windowsのエディションの確認方法</h2><p>スタートボタン -&gt; 設定（歯車アイコン） -&gt; システム -&gt; バージョン情報（左メニューの一番下）を開くと、情報が載っています。</p>
<span id="more"></span>

<img src="/2020/11/02/ubuntu-on-hyperv/01-windows10-version.png" class="" title="バージョン情報画面">


<h2 id="Hyper-Vの有効化-1"><a href="#Hyper-Vの有効化-1" class="headerlink" title="Hyper-Vの有効化"></a>Hyper-Vの有効化</h2><p>エディションの確認ができたら、次にHyper-Vの有効化を行います。</p>
<p>スタートボタン -&gt; 設定（歯車アイコン） -&gt; アプリ -&gt; プログラムと機能 -&gt; Windows の機能の有効化または無効化</p>
<p>の順に開いていきます。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/11-windows10-settings.png" class="" title="設定画面">

<img src="/2020/11/02/ubuntu-on-hyperv/12-windows10-app.png" class="" title="アプリと機能">

<img src="/2020/11/02/ubuntu-on-hyperv/13-windows10-prog.png" class="" title="プログラムと機能">

<p>Windowsの機能の画面にて、Hyper-Vにチェックをつけて「OK」をクリック。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/14-windows10-winfunc.png" class="" title="Windowsoの機能">

<p>セットアップが完了すると再起動を求められる場合がありますので、その際にはPCを再起動します。</p>
<p>以上でHyper-Vの有効化が完了です。</p>
<h1 id="仮想マシンの新規作成"><a href="#仮想マシンの新規作成" class="headerlink" title="仮想マシンの新規作成"></a>仮想マシンの新規作成</h1><p>次に、仮想マシンを作成していきます。<br>まずはスタートメニューからHyper-V マネージャーを起動を起動します。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/21-hyper-v.png" class="" title="Hyper-Vの画面">

<p>左メニューに表示されているサーバーを選択し、右側メニューの「新規」から「仮想マシン」を選択します。</p>
<h2 id="名前と場所の指定"><a href="#名前と場所の指定" class="headerlink" title="名前と場所の指定"></a>名前と場所の指定</h2><p>VMの名前は適当に Ubuntu-20.04 などにして、保存場所を確認します。<br>今回はCドライブの容量が少ないので、Dドライブに適当にフォルダを作成しました。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/22-hyper-v-name.png" class="" title="Hyper-Vの名前と場所の設定画面">

<h2 id="世代の指定"><a href="#世代の指定" class="headerlink" title="世代の指定"></a>世代の指定</h2><p>Ubuntuは14.04以降が第2世代をサポートしているようです。<br>他のOSをインストールする場合には、マイクロソフトのドキュメントを参照して第1世代か第2世代を選択してください。</p>
<p><a href="https://docs.microsoft.com/ja-jp/windows-server/virtualization/hyper-v/plan/should-i-create-a-generation-1-or-2-virtual-machine-in-hyper-v#ubuntu-guest-operating-system-support">（参考）Ubuntu のゲスト オペレーティング システムのサポート</a></p>
<p>今回使用するのは Ubuntu 20.04 なので、第2世代で作成しました。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/23-hyper-v-gene.png" class="" title="Hyper-Vの世代">

<h2 id="インストールオプション"><a href="#インストールオプション" class="headerlink" title="インストールオプション"></a>インストールオプション</h2><p>ブートイメージファイルを指定するか、後で設定するか選択できます。<br>Ubuntuのサイトからisoファイルをダウンロードしていたので、そのファイルパスを指定します。</p>
<p><a href="#Ubuntu%E3%81%AEiso%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%85%A5%E6%89%8B">（参考）Ubuntuのisoファイルの入手</a></p>
<img src="/2020/11/02/ubuntu-on-hyperv/24-hyper-v-inst_opt.png" class="" title="Hyper-Vのインストールオプション">

<h2 id="仮想マシンの新規作成ウィザードの完了"><a href="#仮想マシンの新規作成ウィザードの完了" class="headerlink" title="仮想マシンの新規作成ウィザードの完了"></a>仮想マシンの新規作成ウィザードの完了</h2><p>最後に設定した内容を確認し、完了をクリックします。</p>
<h1 id="仮想マシンへUbuntuをインストール"><a href="#仮想マシンへUbuntuをインストール" class="headerlink" title="仮想マシンへUbuntuをインストール"></a>仮想マシンへUbuntuをインストール</h1><h2 id="Ubuntuのisoファイルの入手"><a href="#Ubuntuのisoファイルの入手" class="headerlink" title="Ubuntuのisoファイルの入手"></a>Ubuntuのisoファイルの入手</h2><p>下記のページからUbuntuのisoイメージをダウンロードします。</p>
<p><a href="https://www.ubuntulinux.jp/download">Ubuntuの入手 (https://www.ubuntulinux.jp/download)</a></p>
<h2 id="Hyper-Vへの接続と起動"><a href="#Hyper-Vへの接続と起動" class="headerlink" title="Hyper-Vへの接続と起動"></a>Hyper-Vへの接続と起動</h2><p>元の画面に戻ると、仮想マシンが作られていると思いますので、名前をダブルクリックして接続します。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/31-hyper-v-connect.png" class="" title="Hyper-Vへの接続">

<p>この時点ではまだ仮想マシンは起動していませんので、画面上の起動ボタンをクリックし、起動します。</p>
<img src="/2020/11/02/ubuntu-on-hyperv/32-hyper-v-start.png" class="" title="Hyper-Vの起動">


<h2 id="Ubuntuのインストール"><a href="#Ubuntuのインストール" class="headerlink" title="Ubuntuのインストール"></a>Ubuntuのインストール</h2><p>Ubuntuのインストーラが自動で起動しますので、画面指示に従ってインストールします。</p>
<p>(2023&#x2F;01&#x2F;07 追記)<br>起動しない場合は、Hyper-Vの仮想マシンの設定から「セキュアブート」を無効にしてみてください。</p>
<p>言語を選択し、右側の「Ubuntuをインストール」を選択します</p>
<img src="/2020/11/02/ubuntu-on-hyperv/41-ubuntu-install.png" class="" title="インストーラーの開始">

<p>キーボードレイアウトは日本語を選択</p>
<img src="/2020/11/02/ubuntu-on-hyperv/42-ubuntu-key.png" class="" title="キーボードレイアウト選択">

<p>今回はオフィスなどは不要なので最小インストールを選択</p>
<img src="/2020/11/02/ubuntu-on-hyperv/43-ubuntu-minimum.png" class="" title="最小インストール">

<p>作ったばかりのクリーンな環境なので、削除してインストールします</p>
<img src="/2020/11/02/ubuntu-on-hyperv/44-ubuntu-clean_install.png" class="" title="クリーンインストール">

<p>とりあえず「続ける」を選択</p>
<img src="/2020/11/02/ubuntu-on-hyperv/45-ubuntu-clean_install2.png" class="" title="パーディションの確認">

<p>地域を選択</p>
<img src="/2020/11/02/ubuntu-on-hyperv/46-ubuntu-timezone.png" class="" title="タイムゾーン選択">

<p>ユーザーを作成します</p>
<img src="/2020/11/02/ubuntu-on-hyperv/47-ubuntu-username.png" class="" title="ユーザー作成">

<p>インストールが完了するのを待ちます</p>
<img src="/2020/11/02/ubuntu-on-hyperv/48-ubuntu-progress.png" class="" title="インストール中">

<p>インストールが完了すると再起動するよう表示されますので、そのまま再起動します。<br>しばらくするとUbuntuが起動しますので、必要に応じて各種設定をしてください。 </p>
<img src="/2020/11/02/ubuntu-on-hyperv/49-ubuntu-start.png" class="" title="インストールが完了">

<p>これでUbuntuのインストールは完了です。<br>ソフトウェアの更新などが表示された場合は適宜実施してください。 </p>
<p>初期設定は別記事で書く予定です。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Hyper-V</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>Hyper-V</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Serverで開発環境を立てた時のメモ</title>
    <url>/2023/01/07/ubuntu-server-setup/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Ubuntu ServerをHyper-Vに構築し、VSCodeからRemote-SSHでリモート接続できるようにします。</p>
<span id="more"></span>

<h1 id="UbuntuのHyper-Vへのインストール"><a href="#UbuntuのHyper-Vへのインストール" class="headerlink" title="UbuntuのHyper-Vへのインストール"></a>UbuntuのHyper-Vへのインストール</h1><h2 id="OSイメージの入手"><a href="#OSイメージの入手" class="headerlink" title="OSイメージの入手"></a>OSイメージの入手</h2><p>以下のサイトからisoをダウンロードします。</p>
<p><a href="https://www.ubuntulinux.jp/">https://www.ubuntulinux.jp/</a><br><a href="https://jp.ubuntu.com/download">https://jp.ubuntu.com/download</a></p>
<p>この時点（2023&#x2F;1）では、以下のバージョンが最新でした。<br>Ubuntu Server 22.04.1 LTS</p>
<h2 id="Hyper-Vの仮想マシンの準備"><a href="#Hyper-Vの仮想マシンの準備" class="headerlink" title="Hyper-Vの仮想マシンの準備"></a>Hyper-Vの仮想マシンの準備</h2><p>以下の記事を参照</p>
<p><a href="/2020/11/02/ubuntu-on-hyperv/" title="Hyper-Vに関する記事">Ubuntu 20.04 の開発環境を Windows 10 Pro の Hyper-V に構築</a></p>
<h2 id="Ubuntu-Serverのインストール"><a href="#Ubuntu-Serverのインストール" class="headerlink" title="Ubuntu Serverのインストール"></a>Ubuntu Serverのインストール</h2><p>isoファイルを仮想マシンのドライブにセットして仮想マシンを起動すると、Ubuntu Serverのインストーラーが起動するので、画面の指示に従って進めます。</p>
<p>途中でユーザー名とパスワードを設定し、OpenSSHをインストールするか聞かれるので、インストールするを選択しておきます。</p>
<p>インストールが開始されたら終了まで待ちましょう。</p>
<h2 id="Ubuntu-Serverへのログイン"><a href="#Ubuntu-Serverへのログイン" class="headerlink" title="Ubuntu Serverへのログイン"></a>Ubuntu Serverへのログイン</h2><p>Hyper-Vの仮想マシン接続からログインするか、あるいは、適当なターミナルアプリ（Rloginなど）を使用して、<br>インストール途中で設定したユーザー名とパスワードでログインできることをか確認します。</p>
<h1 id="VSCodeからUbuntu-ServerにSSH接続する設定"><a href="#VSCodeからUbuntu-ServerにSSH接続する設定" class="headerlink" title="VSCodeからUbuntu ServerにSSH接続する設定"></a>VSCodeからUbuntu ServerにSSH接続する設定</h1><h2 id="VSCodeにRemote-SSHの拡張機能をインストール"><a href="#VSCodeにRemote-SSHの拡張機能をインストール" class="headerlink" title="VSCodeにRemote-SSHの拡張機能をインストール"></a>VSCodeにRemote-SSHの拡張機能をインストール</h2><p>VSCodeを起動し、拡張機能のメニューを開いてRemote-SSHをインストールします。</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh</a></p>
<h2 id="SSH-Keyの作成"><a href="#SSH-Keyの作成" class="headerlink" title="SSH Keyの作成"></a>SSH Keyの作成</h2><p>SSHキーを作成する。<br>最近はed25519が推奨されているようなので(2023&#x2F;1現在)、指定して作成します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t ed25519</span><br></pre></td></tr></table></figure>

<p>※GithubのSSH鍵の設定ドキュメント参照</p>
<p><a href="https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>
<p>RSAの4096bitでもよいと思われます</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096</span><br></pre></td></tr></table></figure>

<p>キーは .ssh フォルダ内に作成されます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id_ed25519</span><br><span class="line">id_ed25519.pub</span><br></pre></td></tr></table></figure>

<p>公開鍵(id_ed25519.pub)を、サーバーのauthorized_keyに登録します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd .ssh</span><br><span class="line">$ cat id_ed25519.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<p>パーミッションの変更をします。<br>(もしかしたら最初からこの権限になっているかもしれません)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>

<h2 id="VSCodeを実行するPCに秘密鍵をコピー"><a href="#VSCodeを実行するPCに秘密鍵をコピー" class="headerlink" title="VSCodeを実行するPCに秘密鍵をコピー"></a>VSCodeを実行するPCに秘密鍵をコピー</h2><p>SSH Keyの作成でできたもう一方の鍵を、VSCodeを起動するPCのユーザーフォルダにコピーします</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\UserName\.ssh</span><br></pre></td></tr></table></figure>

<h2 id="VSCodeのSSH設定"><a href="#VSCodeのSSH設定" class="headerlink" title="VSCodeのSSH設定"></a>VSCodeのSSH設定</h2><p>SSH構成ファイルに設定を書き込みます</p>
<p>構成ファイルの場所</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\UserName\.ssh\config</span><br></pre></td></tr></table></figure>

<p>書き込む内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host remotessh</span><br><span class="line"> Hostname &lt;サーバーのIP&gt;</span><br><span class="line"> User &lt;ログインユーザー名&gt;</span><br><span class="line"> Port 22</span><br><span class="line"> IdentityFile &lt;秘密鍵のパス&gt; (C:\Users\UserName\.ssh\id_ed25519)</span><br></pre></td></tr></table></figure>


<h2 id="VSCodeからSSH接続確認"><a href="#VSCodeからSSH接続確認" class="headerlink" title="VSCodeからSSH接続確認"></a>VSCodeからSSH接続確認</h2><p>VSCodeを起動し、画面左下の緑色の”&gt;&lt;”マークをクリックすると、画面上部にRemote-SSHのメニューが表示されますので、「ホストに接続する」を選択し、先ほど設定したHostnameを選択します。</p>
<p>これで、いちいちパスワードの入力を要求されず、接続できるようになりました。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Hyper-V</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>Hyper-V</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu ServerにPythonとpyenvをインストールして開発環境を構築した時のメモ</title>
    <url>/2023/02/23/python-install/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Ubuntu ServerへPythonとpyenvをインストールして、開発環境を構築したので、その時のメモ。</p>
<span id="more"></span>

<h1 id="Ubuntuへのpyenvのインストール"><a href="#Ubuntuへのpyenvのインストール" class="headerlink" title="Ubuntuへのpyenvのインストール"></a>Ubuntuへのpyenvのインストール</h1><p>基本的には、pyenvのgithubに記載の手順に沿ってインストールします</p>
<p><a href="https://github.com/pyenv/pyenv#installation">(Github) pyenv&#x2F;pyenvインストール方法</a></p>
<h2 id="pyenvのインストール"><a href="#pyenvのインストール" class="headerlink" title="pyenvのインストール"></a>pyenvのインストール</h2><p>最新のHEADを取得する場合は下記のコマンドを実行。<br>pyenvの特定のリリースをインストールする場合は、PYENV_GIT_TAG環境変数を設定します (例export PYENV_GIT_TAG&#x3D;v2.2.5:)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>

<p>pyenv.runは、リポジトリのpyenv-installerにリダイレクトされるので、上記の呼び出しは以下と同じ結果になるようです。(つまりどちらでもよい)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>

<h2 id="pyenvのPATHを設定する"><a href="#pyenvのPATHを設定する" class="headerlink" title="pyenvのPATHを設定する"></a>pyenvのPATHを設定する</h2><p>下記コマンドを実行してPathを通します</p>
<p>まずは、 ~&#x2F;.bashrc へ下記コマンドで設定追加。<br>個人的な好みですが公式のコマンドに加えてコメントを入れています。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# set PATH for pyenv&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>今回使った環境 (Ubuntu Server 22.04) は、<del>&#x2F;.bash_profile がなく、</del>&#x2F;.profileがあるので、下記コマンドを実行しました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;# set PATH for pyenv&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure>

<p>シェルを再起動します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<p>pyenvのバージョンを表示できるようになりました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv --version</span><br><span class="line">pyenv 2.3.13</span><br></pre></td></tr></table></figure>


<p>pyenvのアップデートをしておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv update</span><br></pre></td></tr></table></figure>

<h2 id="pythonをバージョン指定してインストール"><a href="#pythonをバージョン指定してインストール" class="headerlink" title="pythonをバージョン指定してインストール"></a>pythonをバージョン指定してインストール</h2><p>下記コマンドを実行してインストール可能なリストを取得します</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv install --list</span><br><span class="line">Available versions:</span><br><span class="line">  2.1.3</span><br><span class="line">  2.2.3</span><br><span class="line">  2.3.7</span><br><span class="line">  (中略)</span><br><span class="line">  3.10.10</span><br><span class="line">  3.11.0</span><br><span class="line">  3.11-dev</span><br><span class="line">  3.11.1</span><br><span class="line">  3.11.2</span><br><span class="line">  3.12.0a5</span><br><span class="line">  3.12-dev</span><br></pre></td></tr></table></figure>

<p>今回は、3.10.10と、3.11.2を使ってみます<br>下記コマンドを実行してそれぞれのバージョンをインストールします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv install 3.10.4</span><br><span class="line">$ pyenv install 3.11.2</span><br></pre></td></tr></table></figure>

<p>pythonの指定したバージョンをインストールできたか確認します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/testuser/.pyenv/version)</span><br><span class="line">  3.10.4</span><br><span class="line">  3.11.2</span><br></pre></td></tr></table></figure>

<h2 id="pyenvでpythonをバージョン指定してインストールするときに失敗した場合の対処法"><a href="#pyenvでpythonをバージョン指定してインストールするときに失敗した場合の対処法" class="headerlink" title="pyenvでpythonをバージョン指定してインストールするときに失敗した場合の対処法"></a>pyenvでpythonをバージョン指定してインストールするときに失敗した場合の対処法</h2><p>ここでpyenvでpythonのインストールに失敗し、下記のようなエラーが出ることがあります。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BUILD FAILED (Ubuntu 22.04 using python-build 20180424)</span><br><span class="line"></span><br><span class="line">Inspect or clean up the working tree at /tmp/python-build.20230223130153.2311</span><br><span class="line">Results logged to /tmp/python-build.20230223130153.2311.log</span><br><span class="line"></span><br><span class="line">Last 10 log lines:</span><br><span class="line">checking for pkg-config... no</span><br><span class="line">checking for --enable-universalsdk... no</span><br><span class="line">checking for --with-universal-archs... no</span><br><span class="line">checking MACHDEP... &quot;linux&quot;</span><br><span class="line">checking for gcc... no</span><br><span class="line">checking for cc... no</span><br><span class="line">checking for cl.exe... no</span><br><span class="line">configure: error: in `/tmp/python-build.20230223130153.2311/Python-3.11.2&#x27;:</span><br><span class="line">configure: error: no acceptable C compiler found in $PATH</span><br><span class="line">See `config.log&#x27; for more details</span><br></pre></td></tr></table></figure>

<p>ビルド環境に必要なツール群をインストールすると解決する場合があります。</p>
<p>参考: <a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment">https://github.com/pyenv/pyenv/wiki#suggested-build-environment</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update; <span class="built_in">sudo</span> apt install build-essential libssl-dev zlib1g-dev \</span><br><span class="line">libbz2-dev libreadline-dev libsqlite3-dev curl \</span><br><span class="line">libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure>


<h2 id="pythonをバージョン指定して適用"><a href="#pythonをバージョン指定して適用" class="headerlink" title="pythonをバージョン指定して適用"></a>pythonをバージョン指定して適用</h2><p>pythonのバージョンを変更してみます</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv global 3.10.4</span><br></pre></td></tr></table></figure>

<p>変更できたことを確認します</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.10.4 (<span class="built_in">set</span> by /home/testuser/.pyenv/version)</span><br><span class="line">  3.11.2</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 3.10.4</span><br></pre></td></tr></table></figure>

<p>3.11.2も試してみます</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv global 3.11.2</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">  3.10.4</span><br><span class="line">* 3.11.2 (<span class="built_in">set</span> by /home/testuser/.pyenv/version)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 3.11.2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>開発環境</category>
        <category>Ubuntu</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>virtualenv使用して複数の開発環境を切り替えて使えるようにした時のメモ</title>
    <url>/2023/02/24/python-virtualenv-switch/</url>
    <content><![CDATA[<h1 id="UbuntuへのVirtualenvのインストール"><a href="#UbuntuへのVirtualenvのインストール" class="headerlink" title="UbuntuへのVirtualenvのインストール"></a>UbuntuへのVirtualenvのインストール</h1><p>pythonでいろいろなライブラリを入れていくと管理が大変そうなので、開発環境を分けられるようにvirtualenvも入れておきます。</p>
<p><a href="https://github.com/pyenv/pyenv-virtualenv#installation">(Github) pyenv&#x2F;pyenv-virtualenvインストール方法</a></p>
<span id="more"></span>

<h2 id="virtualenvのインストール"><a href="#virtualenvのインストール" class="headerlink" title="virtualenvのインストール"></a>virtualenvのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure>

<p>2023&#x2F;2&#x2F;20 の時点では、pyenvをインストールしたら同時にインストールされていました。<br>自動で有効化するよう以下のようにコマンドを実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>そしてシェルを再起動します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span></span><br></pre></td></tr></table></figure>


<h1 id="pyenvとvirtualenvの使用"><a href="#pyenvとvirtualenvの使用" class="headerlink" title="pyenvとvirtualenvの使用"></a>pyenvとvirtualenvの使用</h1><p>pythonの特定バージョンをインストールし、virtualenvで開発用の環境を複数作ってみます。</p>
<h2 id="virtualenvを使用して開発専用の環境を作る"><a href="#virtualenvを使用して開発専用の環境を作る" class="headerlink" title="virtualenvを使用して開発専用の環境を作る"></a>virtualenvを使用して開発専用の環境を作る</h2><p>次にvirtualenvを使用していくつか環境を作ってみます。<br>今回作るのは、develop-3.10.4と、develop-3.11.2という2個の環境です</p>
<p>以下のコマンドを実行して環境を作ります</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenv 3.10.4 develop-3.10.4</span><br><span class="line">$ pyenv virtualenv 3.11.2 develop-3.11.2</span><br></pre></td></tr></table></figure>

<h2 id="virtualenvを使用して開発専用の環境を使用する"><a href="#virtualenvを使用して開発専用の環境を使用する" class="headerlink" title="virtualenvを使用して開発専用の環境を使用する"></a>virtualenvを使用して開発専用の環境を使用する</h2><p>以下のコマンドを実行して環境を適用します。<br>適用されるとコンソールのユーザー名の前に環境名が表示されるようになります。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv <span class="built_in">local</span> develop-3.10.4</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(develop-3.10.4) testuser@python-pc:~$ </span><br></pre></td></tr></table></figure>

<p>pythonのバージョンは、指定した3.10.4になっています</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 3.10.4</span><br></pre></td></tr></table></figure>


<p>もう一方のdevelop-3.11.2に変更してみます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv <span class="built_in">local</span> develop-3.11.2</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(develop-3.11.2) testuser@python-pc:~$ </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 3.11.2</span><br></pre></td></tr></table></figure>

<p>最後に、開発専用の環境から抜けてみます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv <span class="built_in">local</span> 3.11.2</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testuser@python-pc:~$ </span><br></pre></td></tr></table></figure>

<p>環境名が消えました。</p>
<p>このようにして、環境を切り替えて使用できるようになりました。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Ubuntu</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu ServerにDockerをインストールした時のメモ</title>
    <url>/2023/02/25/docker-install/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Ubuntu ServerへDockerをインストールしたので、その時のメモ。</p>
<span id="more"></span>

<h1 id="Ubuntuへのdockerのインストール"><a href="#Ubuntuへのdockerのインストール" class="headerlink" title="Ubuntuへのdockerのインストール"></a>Ubuntuへのdockerのインストール</h1><p>参考にしたサイトは下記です。</p>
<p><a href="https://docs.docker.com/engine/install/ubuntu/">(Github) dockerインストール方法</a></p>
<h2 id="古いdockerの削除"><a href="#古いdockerの削除" class="headerlink" title="古いdockerの削除"></a>古いdockerの削除</h2><p>まず、古いdockerエンジンがインストールされていたら削除します</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>


<h2 id="リポジトリのセットアップ"><a href="#リポジトリのセットアップ" class="headerlink" title="リポジトリのセットアップ"></a>リポジトリのセットアップ</h2><p>Dockerリポジトリの設定を行って、リポジトリからDockerをインストール更新できるようにします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure>

<p>Docker の公式 GPG キーを追加します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mkdir</span> -m 0755 -p /etc/apt/keyrings</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure>

<p>次のコマンドを使用して、リポジトリをセットアップします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>


<h2 id="Dockerエンジンのインストール"><a href="#Dockerエンジンのインストール" class="headerlink" title="Dockerエンジンのインストール"></a>Dockerエンジンのインストール</h2><p>パッケージ インデックスを更新しますapt。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>


<p>Docker Engine、containerd、および Docker Compose をインストールします。</p>
<p>最新バージョンをインストールするには、次のコマンドを実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>Hello-worldのイメージを実行して、Dockerエンジンのインストールが成功したことを確認します</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker run hello-world</span><br></pre></td></tr></table></figure>

<p>以下のようなメッセージが出たら成功です。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">2db29710123e: Pull complete </span><br><span class="line">Digest: sha256:6e8b6f026e0b9c419ea0fd02d3905dd0952ad1feea67543f525c73a0a790fefb</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Dockerコマンドをユーザーアカウントで実行する"><a href="#Dockerコマンドをユーザーアカウントで実行する" class="headerlink" title="Dockerコマンドをユーザーアカウントで実行する"></a>Dockerコマンドをユーザーアカウントで実行する</h2><p>上記手順でインストールした場合、ユーザーアカウントで実行すると下記のようなエラーが出ます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker: permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post <span class="string">&quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&quot;</span>: dial unix /var/run/docker.sock: connect: permission denied.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>ユーザーにdockerコマンドの実行権限が付与されていません。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">id</span> &lt;UserName&gt;</span><br><span class="line">uid=1000(&lt;UserName&gt;) gid=1000(&lt;UserName&gt;) <span class="built_in">groups</span>=1000(&lt;UserName&gt;),4(adm),24(cdrom),27(<span class="built_in">sudo</span>),30(dip),46(plugdev),110(lxd)</span><br></pre></td></tr></table></figure>

<p>下記コマンドでdockerコマンドへの権限を付けます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker &lt;UserName&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">id</span> &lt;UserName&gt;</span><br><span class="line">uid=1000(&lt;UserName&gt;) gid=1000(&lt;UserName&gt;) <span class="built_in">groups</span>=1000(&lt;UserName&gt;),4(adm),24(cdrom),27(<span class="built_in">sudo</span>),30(dip),46(plugdev),110(lxd),999(docker)</span><br></pre></td></tr></table></figure>

<p>その後、PCを再起動すると、dockerコマンドが使えるようになります。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>開発環境</category>
        <category>Ubuntu</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu ServerにAWS CLIをインストールした時のメモ</title>
    <url>/2023/02/27/aws-cli-install/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Ubuntu ServerへAWS CLIを使いたくてインストールしたので、その時のメモ。</p>
<span id="more"></span>

<h1 id="UbuntuへのAWS-CLIのインストール"><a href="#UbuntuへのAWS-CLIのインストール" class="headerlink" title="UbuntuへのAWS CLIのインストール"></a>UbuntuへのAWS CLIのインストール</h1><p>参考にしたサイトは下記です。<br>まんま、書いてある通り実施しているだけです。</p>
<p><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/getting-started-install.html">AWS CLI のインストールと更新の手順</a></p>
<p>今回はWindowsのHyper-Vで動作させているUbuntuへインストールしたので以下を実行しました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot;</span> -o <span class="string">&quot;awscliv2.zip&quot;</span></span><br><span class="line">unzip awscliv2.zip</span><br><span class="line"><span class="built_in">sudo</span> ./aws/install</span><br></pre></td></tr></table></figure>

<p>実行したところ下記のエラーが出ました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command <span class="string">&#x27;unzip&#x27;</span> not found, but can be installed with:</span><br><span class="line"><span class="built_in">sudo</span> apt install unzip</span><br></pre></td></tr></table></figure>

<p>unzipが初期インストールされていなかったようなので、入れておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install unzip</span><br></pre></td></tr></table></figure>

<p>AWS CLIのインストールが完了すると下記のメッセージが表示されます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can now run: /usr/local/bin/aws --version</span><br></pre></td></tr></table></figure>

<p>バージョン確認すると、正常にインストールされたようです。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ aws --version</span><br><span class="line">aws-cli/2.10.3 Python/3.9.11 Linux/5.15.0-60-generic exe/x86_64.ubuntu.22 prompt/off</span><br></pre></td></tr></table></figure>


<h1 id="UbuntuへのAWS-CLIの更新"><a href="#UbuntuへのAWS-CLIの更新" class="headerlink" title="UbuntuへのAWS CLIの更新"></a>UbuntuへのAWS CLIの更新</h1><p>既にAWS CLIをインストール済みで、バージョン更新する場合は下記コマンドを実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./aws/install --bin-dir &lt;シンボリックリンク&gt; --install-dir &lt;ディレクトリ&gt; --update</span><br></pre></td></tr></table></figure>


<h2 id="シンボリックリンクとディレクトリの確認"><a href="#シンボリックリンクとディレクトリの確認" class="headerlink" title="シンボリックリンクとディレクトリの確認"></a>シンボリックリンクとディレクトリの確認</h2><p>シンボリックリンクは、下記コマンドで確認します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> aws</span><br><span class="line">/usr/local/bin/aws</span><br></pre></td></tr></table></figure>

<p>シンボリックリンクが指すディレクトリは、下記コマンドで確認します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /usr/local/bin/aws</span><br><span class="line">lrwxrwxrwx 1 root root 37 Feb 26 22:53 /usr/local/bin/aws -&gt; /usr/local/aws-cli/v2/current/bin/aws</span><br></pre></td></tr></table></figure>
<p>ここでは、&#x2F;v2の手前までのパスを、–install-dir パラメータで使用するようです</p>
<h2 id="シンボリックリンクとディレクトリを当てはめたコマンド"><a href="#シンボリックリンクとディレクトリを当てはめたコマンド" class="headerlink" title="シンボリックリンクとディレクトリを当てはめたコマンド"></a>シンボリックリンクとディレクトリを当てはめたコマンド</h2><p>上記はデフォルト設定でインストールした場合の結果であり、シンボリックリンクとディレクトリを当てはめて、以下のコマンドが完成します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./aws/install --bin-dir /usr/local/bin/aws --install-dir /usr/local/aws-cli/ --update</span><br></pre></td></tr></table></figure>

<h2 id="AWS-CLIの更新"><a href="#AWS-CLIの更新" class="headerlink" title="AWS CLIの更新"></a>AWS CLIの更新</h2><p>試しに実行してみましたが、インストールしたばかりなので更新はありませんでした。<br>そのうち試して記事を更新したいと思います。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ./aws/install --bin-dir /usr/local/bin/aws --install-dir /usr/local/aws-cli/ --update</span><br><span class="line">Found same AWS CLI version: /usr/local/aws-cli//v2/2.10.3. Skipping install.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>開発環境</category>
        <category>Ubuntu</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>AWS</tag>
        <tag>AWS-CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS CLIで個人的によく使うコマンドまとめ</title>
    <url>/2023/02/28/aws-cli-command/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>AWS CLIで個人的によく使うコマンドをまとめてみました。</p>
<span id="more"></span>

<p>細かく知りたいときは公式のリファレンスを参照。<br><a href="https://docs.aws.amazon.com/cli/latest/index.html">リファレンス</a></p>
<p>調べるのが面倒な時にこのメモを使います。</p>
<h1 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h1><p><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-files.html">(公式) 設定ファイルと認証情報ファイルの設定</a></p>
<p>名前付きプロファイルの作成、変更</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws configure --profile &lt;PROFILE NAME&gt;</span><br></pre></td></tr></table></figure>

<p>名前付きプロファイルの一覧表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws configure list-profiles</span><br></pre></td></tr></table></figure>

<p>特定のパラメータだけを変更する</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws configure set region &lt;REGION&gt; --profile &lt;PROFILE NAME&gt;</span><br></pre></td></tr></table></figure>

<p>特定のパラメータだけを空欄にする</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws configure set region &quot;&quot; --profile &lt;PROFILE NAME&gt;</span><br></pre></td></tr></table></figure>

<p>プロファイルを削除する（全部のプロファイルが消えるので注意）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -rf ~/.aws/</span><br></pre></td></tr></table></figure>

<p>プロファイルを個別に削除したい場合は、下記ファイルを開いて不要な部分を削除する</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vi ~/.aws/config</span><br><span class="line">$ vi ~/.aws/credentials</span><br></pre></td></tr></table></figure>

<p>おまけ (環境変数)</p>
<p>毎回 <code>--profile &lt;PROFILE NAME&gt;</code> を入力するのは面倒なので、環境変数へ設定することにより毎回指定せずにすみます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export AWS_PROFILE=&lt;PROFILE NAME&gt;</span><br></pre></td></tr></table></figure>


<h1 id="s3"><a href="#s3" class="headerlink" title="s3"></a>s3</h1><p><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-s3-commands.html">(公式) AWS CLI での高レベル (S3) コマンドの使用</a></p>
<h2 id="バケット操作"><a href="#バケット操作" class="headerlink" title="バケット操作"></a>バケット操作</h2><p>バケットを作成する</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 mb s3://bucket-name</span><br></pre></td></tr></table></figure>

<p>バケットを削除する(–forceは中身にオブジェクトが入っていても削除する)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 rb s3://bucket-name --force</span><br></pre></td></tr></table></figure>

<p>バケットを一覧表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 ls</span><br></pre></td></tr></table></figure>


<h2 id="オブジェクト操作"><a href="#オブジェクト操作" class="headerlink" title="オブジェクト操作"></a>オブジェクト操作</h2><p>オブジェクトの一覧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 ls s3://bucket-name/example/</span><br></pre></td></tr></table></figure>

<p>オブジェクトの削除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 rm s3://bucket-name/example/filename.txt</span><br></pre></td></tr></table></figure>

<p>オブジェクトの削除(–recursiveはフォルダ内にファイルがあっても削除する)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 rm s3://bucket-name/example --recursive</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-s3-commands.html#using-s3-commands-managing-objects-copy">(公式) オブジェクトのコピーは多いのでよく使うもの以外は公式参照</a></p>
<p>オブジェクトのコピー (bucket-aのexampleをbucket-bへコピー)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 cp s3://bucket-a/example s3://bucket-b/</span><br></pre></td></tr></table></figure>

<p>オブジェクトのコピー (bucket-aのfile.txtをローカルのカレントディレクトリへコピー)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 cp s3://bucket-a/file.txt ./</span><br></pre></td></tr></table></figure>

<p>オブジェクトのコピー (bucket-aの全オブジェクトをローカルのカレントディレクトリへコピー)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 cp s3://bucket-a/example ./ --recursive</span><br></pre></td></tr></table></figure>

<p>*.txtファイルを除外してコピー (–exclude)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 cp . s3://my-bucket/path --exclude &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<p>*.txtファイルだけを抽出してコピー (–include)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws s3 cp . s3://my-bucket/path --include &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>


<h1 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h1><p><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-ec2-instances.html">(公式) Amazon EC2 インスタンスの起動、一覧表示、および終了</a></p>
<p>インスタンスの一覧表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws ec2 describe-instances</span><br></pre></td></tr></table></figure>

<p>インスタンスへのタグの追加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws ec2 create-tags --resources &lt;INSTANCE ID&gt; --tags Key=&lt;TAG NAME&gt;,Value=&lt;TAG VALUE&gt;</span><br><span class="line"></span><br><span class="line">$ aws ec2 create-tags --resources i-5203422c --tags Key=Name,Value=MyInstance</span><br></pre></td></tr></table></figure>

<p>特定のタグを持つインスタンス</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws ec2 describe-instances --filters &quot;Name=tag:&lt;TAG NAME&gt;,Values=&lt;TAG VALUE&gt;&quot;</span><br><span class="line"></span><br><span class="line">$ aws ec2 describe-instances --filters &quot;Name=tag:Name,Values=MyInstance&quot;</span><br></pre></td></tr></table></figure>

<p>インスタンスの起動</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws ec2 start-instances --instance-ids &lt;INSTANCE ID&gt; &lt;INSTANCE ID&gt; ...</span><br><span class="line"></span><br><span class="line">aws ec2 start-instances --instance-ids i-1234567890abcdef0</span><br></pre></td></tr></table></figure>


<p>インスタンスの停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ aws ec2 stop-instances --instance-ids &lt;INSTANCE ID&gt; &lt;INSTANCE ID&gt; ...</span><br><span class="line"></span><br><span class="line">aws ec2 stop-instances --instance-ids i-1234567890abcdef0</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>開発環境</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>AWS</tag>
        <tag>AWS-CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu ServerにAWS SAMをインストールした時のメモ</title>
    <url>/2023/03/03/aws-sam-install/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Ubuntu ServerへAWS SAMを使いたくてインストールしたので、その時のメモ。</p>
<span id="more"></span>

<h1 id="UbuntuへのAWS-SAM-CLIのインストール"><a href="#UbuntuへのAWS-SAM-CLIのインストール" class="headerlink" title="UbuntuへのAWS SAM CLIのインストール"></a>UbuntuへのAWS SAM CLIのインストール</h1><p>参考にしたサイトは下記です。</p>
<p><a href="https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/install-sam-cli.html">AWS SAM CLI のインストール</a></p>
<h2 id="AWS-SAM-CLIのダウンロード"><a href="#AWS-SAM-CLIのダウンロード" class="headerlink" title="AWS SAM CLIのダウンロード"></a>AWS SAM CLIのダウンロード</h2><p>下記のようにzipファイルを任意のディレクトリへダウンロードします</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip</span><br></pre></td></tr></table></figure>

<p>Unzipしてインストールしていきます</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip aws-sam-cli-linux-x86_64.zip -d sam-installation</span><br><span class="line">$ sudo ./sam-installation/install</span><br></pre></td></tr></table></figure>

<p>インストールが完了したらバージョンを確認します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam --version</span><br><span class="line">SAM CLI, version 1.76.0</span><br></pre></td></tr></table></figure>


<h1 id="AWS-SAM-でサンプルアプリ作成"><a href="#AWS-SAM-でサンプルアプリ作成" class="headerlink" title="AWS SAM でサンプルアプリ作成"></a>AWS SAM でサンプルアプリ作成</h1><p>SAMでサンプルでアプリを構築してみます。<br>参考にしたサイトは下記です。</p>
<p><a href="https://catalog.workshops.aws/complete-aws-sam/en-US">The Complete AWS SAM Workshop</a></p>
<h2 id="Hello-World-プロジェクトの作成"><a href="#Hello-World-プロジェクトの作成" class="headerlink" title="Hello World プロジェクトの作成"></a>Hello World プロジェクトの作成</h2><p>まずはSAMのプロジェクトを作成します。<br>適当な作業用ディレクトリへ移動して下記のコマンドを実行します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam init</span><br></pre></td></tr></table></figure>

<p>ウィザードに従って選択していきます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Which template source would you like to use?</span><br><span class="line">        1 - AWS Quick Start Templates</span><br><span class="line">        2 - Custom Template Location</span><br><span class="line">Choice: 1</span><br><span class="line"></span><br><span class="line">Choose an AWS Quick Start application template</span><br><span class="line">        1 - Hello World Example</span><br><span class="line">        2 - Multi-step workflow</span><br><span class="line">        3 - Serverless API</span><br><span class="line">        4 - Scheduled task</span><br><span class="line">        5 - Standalone function</span><br><span class="line">        6 - Data processing</span><br><span class="line">        7 - Hello World Example With Powertools</span><br><span class="line">        8 - Infrastructure event management</span><br><span class="line">        9 - Serverless Connector Hello World Example</span><br><span class="line">        10 - Multi-step workflow with Connectors</span><br><span class="line">        11 - Lambda EFS example</span><br><span class="line">        12 - DynamoDB Example</span><br><span class="line">        13 - Machine Learning</span><br><span class="line">Template: 1</span><br><span class="line"></span><br><span class="line">Use the most popular runtime and package type? (Python and zip) [y/N]: n</span><br></pre></td></tr></table></figure>


<p>希望するランタイムとバージョンを選択します、今回は “16 - Python3.9” にしました</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Which runtime would you like to use?</span><br><span class="line">        1 - aot.dotnet7 (provided.al2)</span><br><span class="line">        2 - dotnet6</span><br><span class="line">        3 - dotnet5.0</span><br><span class="line">        4 - dotnetcore3.1</span><br><span class="line">        5 - go1.x</span><br><span class="line">        6 - go (provided.al2)</span><br><span class="line">        7 - graalvm.java11 (provided.al2)</span><br><span class="line">        8 - graalvm.java17 (provided.al2)</span><br><span class="line">        9 - java11</span><br><span class="line">        10 - java8.al2</span><br><span class="line">        11 - java8</span><br><span class="line">        12 - nodejs18.x</span><br><span class="line">        13 - nodejs16.x</span><br><span class="line">        14 - nodejs14.x</span><br><span class="line">        15 - nodejs12.x</span><br><span class="line">        16 - python3.9</span><br><span class="line">        17 - python3.8</span><br><span class="line">        18 - python3.7</span><br><span class="line">        19 - ruby2.7</span><br><span class="line">        20 - rust (provided.al2)</span><br><span class="line">Runtime: 16</span><br></pre></td></tr></table></figure>

<p>zipパッケージを選択し、Project nameはsam-appのままにしました。<br>途中X-RayやApplication Insgihtsを有効化するか聞かれますが、Noを選択しています。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">What package type would you like to use?</span><br><span class="line">        1 - Zip</span><br><span class="line">        2 - Image</span><br><span class="line">Package type: 1</span><br><span class="line"></span><br><span class="line">Based on your selections, the only dependency manager available is pip.</span><br><span class="line">We will proceed copying the template using pip.</span><br><span class="line"></span><br><span class="line">Would you like to enable X-Ray tracing on the function(s) in your application?  [y/N]: n</span><br><span class="line"></span><br><span class="line">Would you like to enable monitoring using CloudWatch Application Insights?</span><br><span class="line">For more info, please view https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-application-insights.html [y/N]: n</span><br><span class="line"></span><br><span class="line">Project name [sam-app]:</span><br></pre></td></tr></table></figure>

<p>以下の表に表示されて、初期化が完了します</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cloning from https://github.com/aws/aws-sam-cli-app-templates (process may take a moment)</span><br><span class="line"></span><br><span class="line">    -----------------------</span><br><span class="line">    Generating application:</span><br><span class="line">    -----------------------</span><br><span class="line">    Name: sam-app</span><br><span class="line">    Runtime: python3.9</span><br><span class="line">    Architectures: x86_64</span><br><span class="line">    Dependency Manager: pip</span><br><span class="line">    Application Template: hello-world</span><br><span class="line">    Output Directory: .</span><br><span class="line">    Configuration file: sam-app/samconfig.toml</span><br><span class="line">    </span><br><span class="line">    Next steps can be found in the README file at sam-app/README.md</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">Commands you can use next</span><br><span class="line">=========================</span><br><span class="line">[*] Create pipeline: cd sam-app &amp;&amp; sam pipeline init --bootstrap</span><br><span class="line">[*] Validate SAM template: cd sam-app &amp;&amp; sam validate</span><br><span class="line">[*] Test Function in the Cloud: cd sam-app &amp;&amp; sam sync --stack-name &#123;stack-name&#125; --watch</span><br></pre></td></tr></table></figure>

<p>sam-appのフォルダが作成されました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">sam-app</span><br></pre></td></tr></table></figure>



<h2 id="Hello-World-の内容"><a href="#Hello-World-の内容" class="headerlink" title="Hello World の内容"></a>Hello World の内容</h2><p>API Gateway, Lambda, IAM Roleで構成されるアプリケーションのテンプレートが作成されました。</p>
<p>アーキテクチャや、実際のLambdaのコードの内容はAWSのサイトを参照してください。<br><a href="https://catalog.workshops.aws/complete-aws-sam/en-US/module-1-sam-setup/20-architecture">Project Architecture</a></p>
<h2 id="Hello-World-のローカル実行"><a href="#Hello-World-のローカル実行" class="headerlink" title="Hello World のローカル実行"></a>Hello World のローカル実行</h2><p>変更をリポジトリへプッシュする前に、動作確認やデバッグをするために、<br>AWS SAM CLI を使用してローカルで実行を行います。</p>
<p>まずは、依存関係のライブラリをインストールします。</p>
<p>ちなみに、今回の環境は以下のPythonおよびpipのバージョンです。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 3.9.16</span><br><span class="line">$ pip --version</span><br><span class="line">pip 22.0.4 from /home/user/.pyenv/versions/3.9.16/envs/develop-3.9.16/lib/python3.9/site-packages/pip (python 3.9)</span><br></pre></td></tr></table></figure>

<p>“sam init”を実行したディレクトリからhello_worldディレクトリへ移動し、pipでインストールを行います。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd sam-app/hello_world</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>依存ライブラリのインストールが完了しました</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installing collected packages: charset-normalizer, urllib3, idna, certifi, requests</span><br><span class="line">Successfully installed certifi-2022.12.7 charset-normalizer-3.0.1 idna-3.4 requests-2.28.2 urllib3-1.26.14</span><br></pre></td></tr></table></figure>

<p>sam-appフォルダへ戻り、Lambdaをローカル実行してみます。<br>statusCodeと、bodyが出力されたら成功です。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/environment/sam-app</span><br><span class="line">$ sam local invoke --event events/event.json</span><br><span class="line">Invoking app.lambda_handler (python3.9)</span><br><span class="line">Local image was not found.</span><br><span class="line">Removing rapid images for repo public.ecr.aws/sam/emulation-python3.9</span><br><span class="line">Building image.............</span><br><span class="line">Using local image: public.ecr.aws/lambda/python:3.9-rapid-x86_64.</span><br><span class="line"></span><br><span class="line">Mounting /home/user/environment/sam-app/hello_world as /var/task:ro,delegated inside runtime container</span><br><span class="line">&#123;&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;&#123;\&quot;message\&quot;: \&quot;hello world\&quot;&#125;&quot;&#125;END RequestId: 6e1309d6-4f7f-4d7d-bac6-0c0e6b102a49</span><br><span class="line">REPORT RequestId: 6e1309d6-4f7f-4d7d-bac6-0c0e6b102a49  Init Duration: 0.31 ms  Duration: 181.50 ms     Billed Duration: 182 ms Memory Size: 128 MB Max Memory Used: 128 MB</span><br></pre></td></tr></table></figure>

<p>次に、API Gateway をシミュレートするローカル HTTP サーバーを実行します</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/environment/sam-app</span><br><span class="line">$ sam local start-api --port 8080</span><br><span class="line">Initializing the lambda functions containers.</span><br><span class="line">Local image is up-to-date</span><br><span class="line">Using local image: public.ecr.aws/lambda/python:3.9-rapid-x86_64.</span><br><span class="line"></span><br><span class="line">Mounting /home/user/environment/sam-app/hello_world as /var/task:ro,delegated inside runtime container</span><br><span class="line">Containers Initialization is done.</span><br><span class="line">Mounting HelloWorldFunction at http://127.0.0.1:8080/hello [GET]</span><br><span class="line">You can now browse to the above endpoints to invoke your functions. You do not need to restart/reload SAM CLI while working on your functions, changes will be reflected instantly/automatically. If you used sam build before running local commands, you will need to re-run sam build for the changes to be picked up. You only need to restart SAM CLI if you update your AWS SAM template</span><br><span class="line">2023-03-04 22:05:33 WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on http://127.0.0.1:8080</span><br><span class="line">2023-03-04 22:05:33 Press CTRL+C to quit</span><br></pre></td></tr></table></figure>

<p>そして、実際にローカルのAPI Gatewayへリクエストを投げてみます。<br>別のターミナルを開いてcurlコマンドを実行します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:8080/hello</span><br><span class="line">&#123;&quot;message&quot;: &quot;hello world&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hello-World-のコード変更と反映"><a href="#Hello-World-のコード変更と反映" class="headerlink" title="Hello World のコード変更と反映"></a>Hello World のコード変更と反映</h2><p>Lambdaのコードを変更し応答メッセージを変更すると、プロセスを再起動しなくても、アプリケーションの応答が変更されます。</p>
<p>~&#x2F;environment&#x2F;sam-app&#x2F;hello_world&#x2F;app.py</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">    &quot;statusCode&quot;: 200,</span><br><span class="line">    &quot;body&quot;: json.dumps(&#123;</span><br><span class="line"><span class="deletion">-        &quot;message&quot;: &quot;hello world&quot;,</span></span><br><span class="line"><span class="addition">+        &quot;message&quot;: &quot;hello my friend&quot;,</span></span><br><span class="line">        # &quot;location&quot;: ip.text.replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:8080/hello</span><br><span class="line">&#123;&quot;message&quot;: &quot;hello my friend&quot;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Hello-World-の単体テスト"><a href="#Hello-World-の単体テスト" class="headerlink" title="Hello World の単体テスト"></a>Hello World の単体テスト</h2><p>次のコマンドを実行して単体テストを実行します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/environment/sam-app</span><br><span class="line">$ pip install pytest pytest-mock</span><br><span class="line">$ python -m pytest tests/unit</span><br></pre></td></tr></table></figure>

<p>“hello world”を”hello my friend”に変更していたので、結果はエラーになります。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E       AssertionError: assert &#x27;hello my friend&#x27; == &#x27;hello world&#x27;</span><br><span class="line">E         - hello world</span><br><span class="line">E         + hello my friend</span><br></pre></td></tr></table></figure>

<p>テストコードを修正します。<br>tests&#x2F;unit&#x2F;test_handler.py</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">def test_lambda_handler(apigw_event):</span><br><span class="line"></span><br><span class="line">    ret = app.lambda_handler(apigw_event, &quot;&quot;)</span><br><span class="line">    data = json.loads(ret[&quot;body&quot;])</span><br><span class="line"></span><br><span class="line">    assert ret[&quot;statusCode&quot;] == 200</span><br><span class="line">    assert &quot;message&quot; in ret[&quot;body&quot;]</span><br><span class="line"><span class="deletion">-    assert data[&quot;message&quot;] == &quot;hello world&quot;</span></span><br><span class="line"><span class="addition">+    assert data[&quot;message&quot;] == &quot;hello my friend&quot;</span></span><br></pre></td></tr></table></figure>

<p>今回はエラーが出ません</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -m pytest tests/unit</span><br><span class="line">tests/unit/test_handler.py .             [100%]</span><br><span class="line">=========== 1 passed in 0.01s ===========</span><br></pre></td></tr></table></figure>


<h2 id="Hello-World-のビルドとデプロイ"><a href="#Hello-World-のビルドとデプロイ" class="headerlink" title="Hello World のビルドとデプロイ"></a>Hello World のビルドとデプロイ</h2><p>sam buildコマンドを実行してプロジェクトをビルドします。<br>この処理の中で依存関係を確認してデプロイアーティファクトを生成します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/environment/sam-app</span><br><span class="line">$ sam build</span><br><span class="line">Build Succeeded</span><br><span class="line"></span><br><span class="line">Built Artifacts  : .aws-sam/build</span><br><span class="line">Built Template   : .aws-sam/build/template.yaml</span><br></pre></td></tr></table></figure>

<p>sam deployコマンドを実行してプロジェクトをデプロイします。<br>–guidedパラメータを指定し、ガイド付きモードで進めます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/environment/sam-app</span><br><span class="line">$ sam deploy --guided</span><br><span class="line"></span><br><span class="line">Error: Unable to locate credentials</span><br></pre></td></tr></table></figure>

<p>エラーが出てしまいました、どうやらAWS CLIのconfigureの問題のようです。<br>–profileオプションを普段使っており、デフォルトの認証情報が無いためデプロイ時に認証エラーになっていました。<br>sam deploy コマンドにも–profileオプションがあるので、それを追加したら成功しました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam deploy --guided --profile user</span><br><span class="line"></span><br><span class="line">Configuring SAM deploy</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">        Looking for config file [samconfig.toml] :  Found</span><br><span class="line">        Reading default arguments  :  Success</span><br><span class="line"></span><br><span class="line">        Setting default arguments for &#x27;sam deploy&#x27;</span><br><span class="line">        =========================================</span><br><span class="line">        Stack Name [sam-app]: </span><br><span class="line">        AWS Region [us-east-1]: ap-northeast-1</span><br><span class="line">        #Shows you resources changes to be deployed and require a &#x27;Y&#x27; to initiate deploy</span><br><span class="line">        Confirm changes before deploy [Y/n]: </span><br><span class="line">        #SAM needs permission to be able to create roles to connect to the resources in your template</span><br><span class="line">        Allow SAM CLI IAM role creation [Y/n]: </span><br><span class="line">        #Preserves the state of previously provisioned resources when an operation fails</span><br><span class="line">        Disable rollback [y/N]: </span><br><span class="line">        HelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y</span><br><span class="line">        Save arguments to configuration file [Y/n]: </span><br><span class="line">        SAM configuration file [samconfig.toml]: </span><br><span class="line">        SAM configuration environment [default]: </span><br><span class="line"></span><br><span class="line">        Looking for resources needed for deployment:</span><br><span class="line"></span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line">Previewing CloudFormation changeset before deployment</span><br><span class="line">======================================================</span><br><span class="line">Deploy this changeset? [y/N]: y</span><br></pre></td></tr></table></figure>

<p>デプロイが成功すると下記のような出力がされます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CloudFormation outputs from deployed stack</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Outputs                                                                                                                                 </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Key                 HelloWorldFunctionIamRole                                                                                           </span><br><span class="line">Description         Implicit IAM Role created for Hello World function                                                                  </span><br><span class="line">Value               arn:aws:iam::123456789123:role/sam-app-HelloWorldFunctionRole-1QWE9DKNCP6V3</span><br><span class="line">Key                 HelloWorldApi                                                                                                       </span><br><span class="line">Description         API Gateway endpoint URL for Prod stage for Hello World function                                                    </span><br><span class="line">Value               https://tkgp1hj1zk.execute-api.ap-northeast-1.amazonaws.com/Prod/hello/                                             </span><br><span class="line"></span><br><span class="line">Key                 HelloWorldFunction                                                                                                  </span><br><span class="line">Description         Hello World Lambda Function ARN                                                                                     </span><br><span class="line">Value               arn:aws:lambda:ap-northeast-1:123456789123:function:sam-app-HelloWorldFunction-5RxoDCiBWUPV                         </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Successfully created/updated stack - sam-app in ap-northeast-1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>表示されたAPIに対してcurlでリクエストを投げると、テストした時と同じ結果が返ることが確認できます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s https://tkgp1hj1zk.execute-api.ap-northeast-1.amazonaws.com/Prod/hello/ </span><br><span class="line">&#123;&quot;message&quot;: &quot;hello my friend&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>ガイド付きデプロイを実行したときの入力値はsamconfig.tomlに保存され、次回から入力の手間が省略できます。<br>~&#x2F;environment&#x2F;sam-app&#x2F;samconfig.toml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[default.deploy]</span><br><span class="line">[default.deploy.parameters]</span><br><span class="line">capabilities = &quot;CAPABILITY_IAM&quot;</span><br><span class="line">confirm_changeset = true</span><br><span class="line">resolve_s3 = true</span><br><span class="line">s3_bucket = &quot;aws-sam-cli-managed-default-samclisourcebucket-3uw8p3xikut&quot;</span><br><span class="line">s3_prefix = &quot;sam-app&quot;</span><br><span class="line">region = &quot;ap-northeast-1&quot;</span><br><span class="line">profile = &quot;user&quot;</span><br><span class="line">image_repositories = []</span><br></pre></td></tr></table></figure>

<p>ガイド付きデプロイとsamconfig.tomlについて、下記も参考にするよう記載があったのでリンクしておきます。</p>
<p><a href="https://aws.amazon.com/blogs/compute/a-simpler-deployment-experience-with-aws-sam-cli">A simpler deployment experience with AWS SAM CLI</a></p>
<h2 id="Hello-World-のリソース削除"><a href="#Hello-World-のリソース削除" class="headerlink" title="Hello World のリソース削除"></a>Hello World のリソース削除</h2><p>デプロイしたリソースを削除します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/environment/sam-app</span><br><span class="line">$ sam delete</span><br><span class="line">        Are you sure you want to delete the stack sam-app in the region ap-northeast-1 ? [y/N]: y</span><br><span class="line">        Are you sure you want to delete the folder sam-app in S3 which contains the artifacts? [y/N]: y</span><br><span class="line"></span><br><span class="line">Deleted successfully</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>開発環境</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>AWS</tag>
        <tag>AWS-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS SAMでコンテナLambdaを作成する</title>
    <url>/2023/03/08/aws-sam-container-lambda/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>LambdaのコードをZipではなく、コンテナ環境で実行することができるようになり、<br>ローカルでは動いたけどLambdaに置いたらライブラリがうまく動作しないなど、<br>依存関係がよくわからない問題が避けられそうに感じたので、<br>コンテナLambdaを構築してみることにしました。</p>
<span id="more"></span>

<p>参考にしたページは下記になります。</p>
<p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/images-create.html">Lambda コンテナイメージの作成</a></p>
<h1 id="AWS-SAM-でコンテナイメージのLambdaのベースを作成"><a href="#AWS-SAM-でコンテナイメージのLambdaのベースを作成" class="headerlink" title="AWS SAM でコンテナイメージのLambdaのベースを作成"></a>AWS SAM でコンテナイメージのLambdaのベースを作成</h1><p><a href="/2023/03/03/aws-sam-install/">SAMのインストール方法などは過去記事を参照</a></p>
<p>まず、 sam init コマンドでテンプレートを作成します。<br>今回は下記のように選択してコンテナタイプのLambdaを作成しました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam init</span><br><span class="line"></span><br><span class="line">You can preselect a particular runtime or package type when using the `sam init` experience.</span><br><span class="line">Call `sam init --help` to learn more.</span><br><span class="line"></span><br><span class="line">Which template source would you like to use?</span><br><span class="line">        1 - AWS Quick Start Templates</span><br><span class="line">        2 - Custom Template Location</span><br><span class="line">Choice: 1</span><br><span class="line"></span><br><span class="line">Choose an AWS Quick Start application template</span><br><span class="line">        1 - Hello World Example</span><br><span class="line">        2 - Multi-step workflow</span><br><span class="line">        3 - Serverless API</span><br><span class="line">        4 - Scheduled task</span><br><span class="line">        5 - Standalone function</span><br><span class="line">        6 - Data processing</span><br><span class="line">        7 - Hello World Example With Powertools</span><br><span class="line">        8 - Infrastructure event management</span><br><span class="line">        9 - Serverless Connector Hello World Example</span><br><span class="line">        10 - Multi-step workflow with Connectors</span><br><span class="line">        11 - Lambda EFS example</span><br><span class="line">        12 - DynamoDB Example</span><br><span class="line">        13 - Machine Learning</span><br><span class="line">Template: 1</span><br><span class="line"></span><br><span class="line">Use the most popular runtime and package type? (Python and zip) [y/N]: n</span><br><span class="line"></span><br><span class="line">Which runtime would you like to use?</span><br><span class="line">        1 - aot.dotnet7 (provided.al2)</span><br><span class="line">        2 - dotnet6</span><br><span class="line">        3 - dotnet5.0</span><br><span class="line">        4 - dotnetcore3.1</span><br><span class="line">        5 - go1.x</span><br><span class="line">        6 - go (provided.al2)</span><br><span class="line">        7 - graalvm.java11 (provided.al2)</span><br><span class="line">        8 - graalvm.java17 (provided.al2)</span><br><span class="line">        9 - java11</span><br><span class="line">        10 - java8.al2</span><br><span class="line">        11 - java8</span><br><span class="line">        12 - nodejs18.x</span><br><span class="line">        13 - nodejs16.x</span><br><span class="line">        14 - nodejs14.x</span><br><span class="line">        15 - nodejs12.x</span><br><span class="line">        16 - python3.9</span><br><span class="line">        17 - python3.8</span><br><span class="line">        18 - python3.7</span><br><span class="line">        19 - ruby2.7</span><br><span class="line">        20 - rust (provided.al2)</span><br><span class="line">Runtime: 16</span><br><span class="line"></span><br><span class="line">What package type would you like to use?</span><br><span class="line">        1 - Zip</span><br><span class="line">        2 - Image</span><br><span class="line">Package type: 2</span><br><span class="line"></span><br><span class="line">Based on your selections, the only dependency manager available is pip.</span><br><span class="line">We will proceed copying the template using pip.</span><br><span class="line"></span><br><span class="line">Would you like to enable X-Ray tracing on the function(s) in your application?  [y/N]: n</span><br><span class="line"></span><br><span class="line">Would you like to enable monitoring using CloudWatch Application Insights?</span><br><span class="line">For more info, please view https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-application-insights.html [y/N]: n</span><br><span class="line"></span><br><span class="line">Project name [sam-app]: scanocr-sam    </span><br><span class="line"></span><br><span class="line">Cloning from https://github.com/aws/aws-sam-cli-app-templates (process may take a moment)</span><br><span class="line"></span><br><span class="line">    -----------------------</span><br><span class="line">    Generating application:</span><br><span class="line">    -----------------------</span><br><span class="line">    Name: scanocr-sam</span><br><span class="line">    Base Image: amazon/python3.9-base</span><br><span class="line">    Architectures: x86_64</span><br><span class="line">    Dependency Manager: pip</span><br><span class="line">    Output Directory: .</span><br><span class="line">    Configuration file: scanocr-sam/samconfig.toml</span><br><span class="line"></span><br><span class="line">    Next steps can be found in the README file at scanocr-sam/README.md</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Commands you can use next</span><br><span class="line">=========================</span><br><span class="line">[*] Create pipeline: cd scanocr-sam &amp;&amp; sam pipeline init --bootstrap</span><br><span class="line">[*] Validate SAM template: cd scanocr-sam &amp;&amp; sam validate</span><br><span class="line">[*] Test Function in the Cloud: cd scanocr-sam &amp;&amp; sam sync --stack-name &#123;stack-name&#125; --watch</span><br></pre></td></tr></table></figure>

<p>生成されたプロジェクトのディレクトリ構成は以下のようになっています</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── events</span><br><span class="line">│   └── event.json</span><br><span class="line">├── hello_world</span><br><span class="line">│   ├── app.py</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── requirements.txt</span><br><span class="line">├── __init__.py</span><br><span class="line">├── README.md</span><br><span class="line">├── samconfig.toml</span><br><span class="line">├── template.yaml</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── unit</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        └── test_handler.py</span><br><span class="line"></span><br><span class="line">4 directories, 12 files</span><br></pre></td></tr></table></figure>

<p>生成されたDockerfileは以下ようになっています。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> public.ecr.aws/lambda/python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3.9 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>試しにローカル実行してみます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd scanocr-sam/</span><br><span class="line">$ sam build</span><br><span class="line">$ sam local invoke</span><br><span class="line">&#123;&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;&#123;\&quot;message\&quot;: \&quot;hello world\&quot;&#125;&quot;&#125;END RequestId: 770d2ec0-6d05-4ee2-a2b6-df18fdefc43c</span><br></pre></td></tr></table></figure>

<p>ローカルAPI実行も試してみます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam local start-api</span><br><span class="line">Initializing the lambda functions containers.</span><br><span class="line">Building image.................</span><br><span class="line">Using local image: helloworldfunction:rapid-x86_64.</span><br><span class="line"></span><br><span class="line">Containers Initialization is done.</span><br><span class="line">Mounting HelloWorldFunction at http://127.0.0.1:3000/hello [GET]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:3000/hello</span><br><span class="line">&#123;&quot;message&quot;: &quot;hello world&quot;&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>AWS</tag>
        <tag>AWS-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS SAMで好きなベースイメージを使用したコンテナLambdaでPythonを動作させる</title>
    <url>/2023/03/11/aws-sam-container-lambda-python/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>先の記事でコンテナLambdaを実行できるようになりました。</p>
<p><a href="2023/03/08/aws-sam-container-lambda/">AWS SAMでコンテナLambdaを作成する</a></p>
<p>ですが、ローカルでいろいろ触っている開発環境がUbuntuなので、できれば同じものを使いたいと思い、Ubuntu 22.04のコンテナイメージを使用してLambdaのHello Worldを実行させてみます。</p>
<span id="more"></span>

<h2 id="AWSのLambda用に提供されているコンテナイメージの内容"><a href="#AWSのLambda用に提供されているコンテナイメージの内容" class="headerlink" title="AWSのLambda用に提供されているコンテナイメージの内容"></a>AWSのLambda用に提供されているコンテナイメージの内容</h2><p>ECS用なのかもしれませんが、先の記事で実施した手順で作成したSAMのDockerfileでは、<br>下記のコンテナイメージを使用しています。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM public.ecr.aws/lambda/python:3.9</span><br></pre></td></tr></table></figure>

<p>このOSを調べたところAmazon Linux 2のようでした。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux ddb82d29db91 5.15.0-67-generic #74-Ubuntu SMP Wed Feb 22 14:14:39 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">$ cat /etc/os-release</span><br><span class="line">NAME=&quot;Amazon Linux&quot;</span><br><span class="line">VERSION=&quot;2&quot;</span><br><span class="line">ID=&quot;amzn&quot;</span><br><span class="line">ID_LIKE=&quot;centos rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;2&quot;</span><br><span class="line">PRETTY_NAME=&quot;Amazon Linux 2&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;33&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:2.3:o:amazon:amazon_linux:2&quot;</span><br><span class="line">HOME_URL=&quot;https://amazonlinux.com/&quot;</span><br><span class="line">VARIANT_ID=&quot;202302240956-2.0.1033.0&quot;</span><br></pre></td></tr></table></figure>

<p>sam-app&#x2F;hello_world&#x2F;Dockerfile の中身は以下のとおりです。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> public.ecr.aws/lambda/python:<span class="number">3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3.9 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>


<h2 id="Ubuntuのコンテナイメージに変更する"><a href="#Ubuntuのコンテナイメージに変更する" class="headerlink" title="Ubuntuのコンテナイメージに変更する"></a>Ubuntuのコンテナイメージに変更する</h2><p>sam-app&#x2F;hello_world&#x2F;Dockerfile のFROMをUbuntuのものに変更してみます。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">- FROM public.ecr.aws/lambda/python:3.9</span></span><br><span class="line"><span class="addition">+ FROM ubuntu:22.04</span></span><br><span class="line"></span><br><span class="line">COPY app.py requirements.txt ./</span><br><span class="line"></span><br><span class="line">RUN python3.9 -m pip install -r requirements.txt -t .</span><br><span class="line"></span><br><span class="line"># Command can be overwritten by providing a different command in the template directly.</span><br><span class="line">CMD [&quot;app.lambda_handler&quot;]</span><br></pre></td></tr></table></figure>

<p>ちなみに、FROM ubuntu:22.04 は、以下の内容のコンテナイメージです。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PRETTY_NAME=&quot;Ubuntu 22.04.2 LTS&quot;</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION_ID=&quot;22.04&quot;</span><br><span class="line">VERSION=&quot;22.04.2 LTS (Jammy Jellyfish)&quot;</span><br><span class="line">VERSION_CODENAME=jammy</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">HOME_URL=&quot;https://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br><span class="line">UBUNTU_CODENAME=jammy</span><br></pre></td></tr></table></figure>

<p>以下のように出力され、sam buildが失敗しました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam build</span><br><span class="line">Building image for HelloWorldFunction function</span><br><span class="line">Setting DockerBuildArgs: &#123;&#125; for HelloWorldFunction function</span><br><span class="line">Step 1/4 : FROM ubuntu:22.04</span><br><span class="line">22.04: Pulling from library/ubuntu </span><br><span class="line">76769433fd8a: Pull complete </span><br><span class="line">Status: Downloaded newer image for ubuntu:22.04 ---&gt; 74f2314a03de</span><br><span class="line">Step 2/4 : COPY app.py requirements.txt ./</span><br><span class="line"> ---&gt; 37401066b32b</span><br><span class="line">Step 3/4 : RUN python3.9 -m pip install -r requirements.txt -t .</span><br><span class="line"> ---&gt; Running in 417b8d8b6715</span><br><span class="line">/bin/sh: 1: python3.9: not found</span><br><span class="line"></span><br><span class="line">Build Failed</span><br><span class="line">Error: HelloWorldFunction failed to build: The command &#x27;/bin/sh -c python3.9 -m pip install -r requirements.txt -t .&#x27; returned a non-zero code: 127</span><br></pre></td></tr></table></figure>

<p>UbuntuのイメージにはPython3.9が入っていないようなので、<br>Dockerfile を少し修正して中身を出力させてみます。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:22.04</span><br><span class="line"></span><br><span class="line">COPY app.py requirements.txt ./</span><br><span class="line"></span><br><span class="line"><span class="addition">+ RUN apt list --installed</span></span><br><span class="line"><span class="deletion">- RUN python3.9 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"># Command can be overwritten by providing a different command in the template directly.</span><br><span class="line">CMD [&quot;app.lambda_handler&quot;]</span><br></pre></td></tr></table></figure>

<p>sam build するとDocker Buildのログに以下のように出力されます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Step 3/4 : RUN apt list --installed</span><br><span class="line"> ---&gt; Running in a0c4c4c28918</span><br><span class="line"></span><br><span class="line">WARNING: apt does not have a stable CLI interface. Use with caution in scripts.</span><br><span class="line"></span><br><span class="line">Listing...</span><br><span class="line">adduser/now 3.118ubuntu5 all [installed,local]</span><br><span class="line">apt/now 2.4.8 amd64 [installed,local]</span><br><span class="line">base-files/now 12ubuntu4.3 amd64 [installed,local]</span><br><span class="line">base-passwd/now 3.5.52build1 amd64 [installed,local]</span><br><span class="line">bash/now 5.1-6ubuntu1 amd64 [installed,local]</span><br><span class="line">bsdutils/now 1:2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">coreutils/now 8.32-4.1ubuntu1 amd64 [installed,local]</span><br><span class="line">dash/now 0.5.11+git20210903+057cd650a4ed-3build1 amd64 [installed,local]</span><br><span class="line">debconf/now 1.5.79ubuntu1 all [installed,local]</span><br><span class="line">debianutils/now 5.5-1ubuntu2 amd64 [installed,local]</span><br><span class="line">diffutils/now 1:3.8-0ubuntu2 amd64 [installed,local]</span><br><span class="line">dpkg/now 1.21.1ubuntu2.1 amd64 [installed,local]</span><br><span class="line">e2fsprogs/now 1.46.5-2ubuntu1.1 amd64 [installed,local]</span><br><span class="line">findutils/now 4.8.0-1ubuntu3 amd64 [installed,local]</span><br><span class="line">gcc-12-base/now 12.1.0-2ubuntu1~22.04 amd64 [installed,local]</span><br><span class="line">gpgv/now 2.2.27-3ubuntu2.1 amd64 [installed,local]</span><br><span class="line">grep/now 3.7-1build1 amd64 [installed,local]</span><br><span class="line">gzip/now 1.10-4ubuntu4.1 amd64 [installed,local]</span><br><span class="line">hostname/now 3.23ubuntu2 amd64 [installed,local]</span><br><span class="line">init-system-helpers/now 1.62 all [installed,local]</span><br><span class="line">libacl1/now 2.3.1-1 amd64 [installed,local]</span><br><span class="line">libapt-pkg6.0/now 2.4.8 amd64 [installed,local]</span><br><span class="line">libattr1/now 1:2.5.1-1build1 amd64 [installed,local]</span><br><span class="line">libaudit-common/now 1:3.0.7-1build1 all [installed,local]</span><br><span class="line">libaudit1/now 1:3.0.7-1build1 amd64 [installed,local]</span><br><span class="line">libblkid1/now 2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">libbz2-1.0/now 1.0.8-5build1 amd64 [installed,local]</span><br><span class="line">libc-bin/now 2.35-0ubuntu3.1 amd64 [installed,local]</span><br><span class="line">libc6/now 2.35-0ubuntu3.1 amd64 [installed,local]</span><br><span class="line">libcap-ng0/now 0.7.9-2.2build3 amd64 [installed,local]</span><br><span class="line">libcap2/now 1:2.44-1build3 amd64 [installed,local]</span><br><span class="line">libcom-err2/now 1.46.5-2ubuntu1.1 amd64 [installed,local]</span><br><span class="line">libcrypt1/now 1:4.4.27-1 amd64 [installed,local]</span><br><span class="line">libdb5.3/now 5.3.28+dfsg1-0.8ubuntu3 amd64 [installed,local]</span><br><span class="line">libdebconfclient0/now 0.261ubuntu1 amd64 [installed,local]</span><br><span class="line">libext2fs2/now 1.46.5-2ubuntu1.1 amd64 [installed,local]</span><br><span class="line">libffi8/now 3.4.2-4 amd64 [installed,local]</span><br><span class="line">libgcc-s1/now 12.1.0-2ubuntu1~22.04 amd64 [installed,local]</span><br><span class="line">libgcrypt20/now 1.9.4-3ubuntu3 amd64 [installed,local]</span><br><span class="line">libgmp10/now 2:6.2.1+dfsg-3ubuntu1 amd64 [installed,local]</span><br><span class="line">libgnutls30/now 3.7.3-4ubuntu1.2 amd64 [installed,local]</span><br><span class="line">libgpg-error0/now 1.43-3 amd64 [installed,local]</span><br><span class="line">libgssapi-krb5-2/now 1.19.2-2ubuntu0.1 amd64 [installed,local]</span><br><span class="line">libhogweed6/now 3.7.3-1build2 amd64 [installed,local]</span><br><span class="line">libidn2-0/now 2.3.2-2build1 amd64 [installed,local]</span><br><span class="line">libk5crypto3/now 1.19.2-2ubuntu0.1 amd64 [installed,local]</span><br><span class="line">libkeyutils1/now 1.6.1-2ubuntu3 amd64 [installed,local]</span><br><span class="line">libkrb5-3/now 1.19.2-2ubuntu0.1 amd64 [installed,local]</span><br><span class="line">libkrb5support0/now 1.19.2-2ubuntu0.1 amd64 [installed,local]</span><br><span class="line">liblz4-1/now 1.9.3-2build2 amd64 [installed,local]</span><br><span class="line">liblzma5/now 5.2.5-2ubuntu1 amd64 [installed,local]</span><br><span class="line">libmount1/now 2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">libncurses6/now 6.3-2 amd64 [installed,local]</span><br><span class="line">libncursesw6/now 6.3-2 amd64 [installed,local]</span><br><span class="line">libnettle8/now 3.7.3-1build2 amd64 [installed,local]</span><br><span class="line">libnsl2/now 1.3.0-2build2 amd64 [installed,local]</span><br><span class="line">libp11-kit0/now 0.24.0-6build1 amd64 [installed,local]</span><br><span class="line">libpam-modules-bin/now 1.4.0-11ubuntu2.3 amd64 [installed,local]</span><br><span class="line">libpam-modules/now 1.4.0-11ubuntu2.3 amd64 [installed,local]</span><br><span class="line">libpam-runtime/now 1.4.0-11ubuntu2.3 all [installed,local]</span><br><span class="line">libpam0g/now 1.4.0-11ubuntu2.3 amd64 [installed,local]</span><br><span class="line">libpcre2-8-0/now 10.39-3ubuntu0.1 amd64 [installed,local]</span><br><span class="line">libpcre3/now 2:8.39-13ubuntu0.22.04.1 amd64 [installed,local]</span><br><span class="line">libprocps8/now 2:3.3.17-6ubuntu2 amd64 [installed,local]</span><br><span class="line">libseccomp2/now 2.5.3-2ubuntu2 amd64 [installed,local]</span><br><span class="line">libselinux1/now 3.3-1build2 amd64 [installed,local]</span><br><span class="line">libsemanage-common/now 3.3-1build2 all [installed,local]</span><br><span class="line">libsemanage2/now 3.3-1build2 amd64 [installed,local]</span><br><span class="line">libsepol2/now 3.3-1build1 amd64 [installed,local]</span><br><span class="line">libsmartcols1/now 2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">libss2/now 1.46.5-2ubuntu1.1 amd64 [installed,local]</span><br><span class="line">libssl3/now 3.0.2-0ubuntu1.8 amd64 [installed,local]</span><br><span class="line">libstdc++6/now 12.1.0-2ubuntu1~22.04 amd64 [installed,local]</span><br><span class="line">libsystemd0/now 249.11-0ubuntu3.6 amd64 [installed,local]</span><br><span class="line">libtasn1-6/now 4.18.0-4build1 amd64 [installed,local]</span><br><span class="line">libtinfo6/now 6.3-2 amd64 [installed,local]</span><br><span class="line">libtirpc-common/now 1.3.2-2ubuntu0.1 all [installed,local]</span><br><span class="line">libtirpc3/now 1.3.2-2ubuntu0.1 amd64 [installed,local]</span><br><span class="line">libudev1/now 249.11-0ubuntu3.6 amd64 [installed,local]</span><br><span class="line">libunistring2/now 1.0-1 amd64 [installed,local]</span><br><span class="line">libuuid1/now 2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">libxxhash0/now 0.8.1-1 amd64 [installed,local]</span><br><span class="line">libzstd1/now 1.4.8+dfsg-3build1 amd64 [installed,local]</span><br><span class="line">login/now 1:4.8.1-2ubuntu2.1 amd64 [installed,local]</span><br><span class="line">logsave/now 1.46.5-2ubuntu1.1 amd64 [installed,local]</span><br><span class="line">lsb-base/now 11.1.0ubuntu4 all [installed,local]</span><br><span class="line">mawk/now 1.3.4.20200120-3 amd64 [installed,local]</span><br><span class="line">mount/now 2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">ncurses-base/now 6.3-2 all [installed,local]</span><br><span class="line">ncurses-bin/now 6.3-2 amd64 [installed,local]</span><br><span class="line">passwd/now 1:4.8.1-2ubuntu2.1 amd64 [installed,local]</span><br><span class="line">perl-base/now 5.34.0-3ubuntu1.1 amd64 [installed,local]</span><br><span class="line">procps/now 2:3.3.17-6ubuntu2 amd64 [installed,local]</span><br><span class="line">sed/now 4.8-1ubuntu2 amd64 [installed,local]</span><br><span class="line">sensible-utils/now 0.0.17 all [installed,local]</span><br><span class="line">sysvinit-utils/now 3.01-1ubuntu1 amd64 [installed,local]</span><br><span class="line">tar/now 1.34+dfsg-1ubuntu0.1.22.04.1 amd64 [installed,local]</span><br><span class="line">ubuntu-keyring/now 2021.03.26 all [installed,local]</span><br><span class="line">usrmerge/now 25ubuntu2 all [installed,local]</span><br><span class="line">util-linux/now 2.37.2-4ubuntu3 amd64 [installed,local]</span><br><span class="line">zlib1g/now 1:1.2.11.dfsg-2ubuntu9.2 amd64 [installed,local]</span><br></pre></td></tr></table></figure>

<p>コンテナ用のイメージなので、余計なものは入れてない感じでしょうか、<br>PythonをインストールするようにDockerFileを修正します。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt install -y \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-pip\</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt list --installed | grep python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 --version</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 --version</span></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>sam build してPython3がインストールされたことを確認します。<br>Python 3.10.6とpip 22.0.2がインストールされました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Step 4/7 : RUN apt list --installed | grep python</span><br><span class="line"> ---&gt; Running in 18bda2c0bf99</span><br><span class="line"></span><br><span class="line">WARNING: apt does not have a stable CLI interface. Use with caution in scripts.</span><br><span class="line"></span><br><span class="line">libpython3-dev/jammy-updates,now 3.10.6-1~22.04 amd64 [installed,automatic]</span><br><span class="line">libpython3-stdlib/jammy-updates,now 3.10.6-1~22.04 amd64 [installed,automatic]</span><br><span class="line">libpython3.10-dev/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">libpython3.10-minimal/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">libpython3.10-stdlib/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">libpython3.10/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">python3-dev/jammy-updates,now 3.10.6-1~22.04 amd64 [installed,automatic]</span><br><span class="line">python3-distutils/jammy-updates,now 3.10.6-1~22.04 all [installed,automatic]</span><br><span class="line">python3-lib2to3/jammy-updates,now 3.10.6-1~22.04 all [installed,automatic]</span><br><span class="line">python3-minimal/jammy-updates,now 3.10.6-1~22.04 amd64 [installed,automatic]</span><br><span class="line">python3-pip/jammy-updates,jammy-security,now 22.0.2+dfsg-1ubuntu0.2 all [installed]</span><br><span class="line">python3-pkg-resources/jammy-updates,jammy-security,now 59.6.0-1.2ubuntu0.22.04.1 all [installed,automatic]</span><br><span class="line">python3-setuptools/jammy-updates,jammy-security,now 59.6.0-1.2ubuntu0.22.04.1 all [installed,automatic]</span><br><span class="line">python3-wheel/jammy-updates,jammy-security,now 0.37.1-2ubuntu0.22.04.1 all [installed,automatic]</span><br><span class="line">python3.10-dev/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">python3.10-minimal/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">python3.10/jammy-updates,jammy-security,now 3.10.6-1~22.04.2 amd64 [installed,automatic]</span><br><span class="line">python3/jammy-updates,now 3.10.6-1~22.04 amd64 [installed]</span><br><span class="line">Removing intermediate container 18bda2c0bf99</span><br><span class="line"> ---&gt; 927836e6ff31</span><br><span class="line">Step 5/7 : RUN python3 --version</span><br><span class="line"> ---&gt; Running in 9aab0892f73c</span><br><span class="line">Python 3.10.6</span><br><span class="line">Removing intermediate container 9aab0892f73c</span><br><span class="line"> ---&gt; b15f71f093e8</span><br><span class="line">Step 6/7 : RUN pip3 --version</span><br><span class="line"> ---&gt; Running in 70eb5869c8c1</span><br><span class="line">pip 22.0.2 from /usr/lib/python3/dist-packages/pip (python 3.10)</span><br><span class="line">Removing intermediate container 70eb5869c8c1</span><br></pre></td></tr></table></figure>

<p>それでは、DockerFileを修正してLambdaのHello Worldをlocal invokeしてみます。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt install -y \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-pip\</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>実行してみましたが、No response from invoke container…と出力されてしまい、正常に処理されませんでした。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam local invoke</span><br><span class="line">Invoking Container created from helloworldfunction:python3.9-v1</span><br><span class="line">Building image.................</span><br><span class="line">Using local image: helloworldfunction:rapid-x86_64.</span><br><span class="line"></span><br><span class="line">Function &#x27;HelloWorldFunction&#x27; timed out after 3 seconds</span><br><span class="line">END RequestId: d6d8dfd6-4d74-4157-8238-a17ad333a970</span><br><span class="line">REPORT RequestId: d6d8dfd6-4d74-4157-8238-a17ad333a970  Init Duration: 0.36 ms  Duration: 3000.00 ms    Billed Duration: 3000 ms        Memory Size: 128 MB     Max Memory Used: 128 MB</span><br><span class="line">No response from invoke container for HelloWorldFunction</span><br></pre></td></tr></table></figure>

<h2 id="awslambdaricを使用してPython用のコンテナイメージを作成する"><a href="#awslambdaricを使用してPython用のコンテナイメージを作成する" class="headerlink" title="awslambdaricを使用してPython用のコンテナイメージを作成する"></a>awslambdaricを使用してPython用のコンテナイメージを作成する</h2><p>色々調べてみたところ、AWSが提供しているイメージではないものを使用してPythonを動かす場合、awslambdaricというライブラリをインストールする必要があるようです。</p>
<p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/python-image.html#python-image-create-alt">代替のベースイメージから Python イメージを作成します</a></p>
<p>下記のページのUsageに従ってDockerFileを修正してみます。</p>
<p><a href="https://pypi.org/project/awslambdaric/">AWS Lambda Runtime Interface Client for Python (awslambdaric)</a></p>
<p>前半のFor Build部分は不要なのかもしれませんが、まずはガイドに沿ってDockerFileを修正します。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom function directory</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR=<span class="string">&quot;/function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----For build-----</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span> as build-image</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include global arg in this stage of the build</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install aws-lambda-cpp build dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get install -y \</span></span><br><span class="line"><span class="language-bash">  g++ \</span></span><br><span class="line"><span class="language-bash">  make \</span></span><br><span class="line"><span class="language-bash">  cmake \</span></span><br><span class="line"><span class="language-bash">  unzip \</span></span><br><span class="line"><span class="language-bash">  libcurl4-openssl-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy function code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the function&#x27;s dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install \</span></span><br><span class="line"><span class="language-bash">    --target <span class="variable">$&#123;FUNCTION_DIR&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        awslambdaric</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----For make image-----</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include global arg in this stage of the build</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"><span class="comment"># Set working directory to function root directory</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy in the built dependencies</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-image <span class="variable">$&#123;FUNCTION_DIR&#125;</span> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the function&#x27;s dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt install -y \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-pip\</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/usr/bin/python3&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;awslambdaric&quot;</span> ]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>途中でビルドに失敗しました</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam build</span><br><span class="line">(中略)</span><br><span class="line">Step 6/13 : COPY app.py requirements.txt $&#123;FUNCTION_DIR&#125;</span><br><span class="line"></span><br><span class="line">Build Failed</span><br><span class="line">Error: HelloWorldFunction failed to build: When using COPY with more than one source file, the destination must be a directory and end with a /</span><br></pre></td></tr></table></figure>

<p>DockerFileの最初のARGが悪さしているようなので、宣言部分を以下のように修正してみました。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># Define custom function directory</span><br><span class="line"><span class="deletion">- ARG FUNCTION_DIR=&quot;/function&quot;</span></span><br><span class="line"><span class="addition">+ ARG FUNCTION_DIR=&quot;/function/&quot;</span></span><br></pre></td></tr></table></figure>

<p>今度はpipが無いと言ってきました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam build</span><br><span class="line">(中略)</span><br><span class="line">Step 7/15 : RUN pip install     --target $&#123;FUNCTION_DIR&#125;         awslambdaric</span><br><span class="line"> ---&gt; Running in db7aacc682cf</span><br><span class="line">/bin/sh: 1: pip: not found</span><br><span class="line"></span><br><span class="line">Build Failed</span><br><span class="line">Error: HelloWorldFunction failed to build: The command &#x27;/bin/sh -c pip install     --target $&#123;FUNCTION_DIR&#125;         awslambdaric&#x27; returned a non-zero code: 127</span><br></pre></td></tr></table></figure>

<p>For Build部分にpipのインストールを追加してみます</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"># Install aws-lambda-cpp build dependencies</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">  apt-get install -y \</span><br><span class="line">  g++ \</span><br><span class="line">  make \</span><br><span class="line">  cmake \</span><br><span class="line">  unzip \</span><br><span class="line">  libcurl4-openssl-dev \</span><br><span class="line"><span class="addition">+ python3-pip</span></span><br></pre></td></tr></table></figure>

<p>ビルドが通ったので、sam local invokeをしてみます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam local invoke</span><br><span class="line">Invoking Container created from helloworldfunction:python3.9-v1</span><br><span class="line">Building image.................</span><br><span class="line">Using local image: helloworldfunction:rapid-x86_64.</span><br><span class="line"></span><br><span class="line">END RequestId: dde7e0cf-a1dd-48b3-bc9b-e32552c7c247</span><br><span class="line">REPORT RequestId: dde7e0cf-a1dd-48b3-bc9b-e32552c7c247  Init Duration: 0.40 ms  Duration: 206.61 ms     Billed Duration: 207 ms Memory Size: 128 MB     Max Memory Used: 128 MB</span><br><span class="line">&#123;&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;&#123;\&quot;message\&quot;: \&quot;hello world\&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>正常に動作しました。</p>
<h2 id="awslambdaricを使用したコンテナイメージのDockerFile"><a href="#awslambdaricを使用したコンテナイメージのDockerFile" class="headerlink" title="awslambdaricを使用したコンテナイメージのDockerFile"></a>awslambdaricを使用したコンテナイメージのDockerFile</h2><p>正常に動作した時のDockerFileは、以下の内容です。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom function directory</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR=<span class="string">&quot;/function/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----For build-----</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span> as build-image</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include global arg in this stage of the build</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install aws-lambda-cpp build dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">  apt-get install -y \</span></span><br><span class="line"><span class="language-bash">  g++ \</span></span><br><span class="line"><span class="language-bash">  make \</span></span><br><span class="line"><span class="language-bash">  cmake \</span></span><br><span class="line"><span class="language-bash">  unzip \</span></span><br><span class="line"><span class="language-bash">  libcurl4-openssl-dev \</span></span><br><span class="line"><span class="language-bash">  python3-pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy function code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the function&#x27;s dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install \</span></span><br><span class="line"><span class="language-bash">    --target <span class="variable">$&#123;FUNCTION_DIR&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        awslambdaric</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----For make image-----</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include global arg in this stage of the build</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"><span class="comment"># Set working directory to function root directory</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy in the built dependencies</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-image <span class="variable">$&#123;FUNCTION_DIR&#125;</span> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the function&#x27;s dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-pip\</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/usr/bin/python3&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;awslambdaric&quot;</span> ]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>本当に「—-For fuild—-」部分の記述が必要なのかと思い、<br>削除して必要な記述を移植して試してみました。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom function directory</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR=<span class="string">&quot;/function/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----For make image-----</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include global arg in this stage of the build</span></span><br><span class="line"><span class="keyword">ARG</span> FUNCTION_DIR</span><br><span class="line"><span class="comment"># Set working directory to function root directory</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy function code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.py requirements.txt <span class="variable">$&#123;FUNCTION_DIR&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the function&#x27;s dependencies</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    python3 \</span></span><br><span class="line"><span class="language-bash">    python3-pip\</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install \</span></span><br><span class="line"><span class="language-bash">    --target <span class="variable">$&#123;FUNCTION_DIR&#125;</span> \</span></span><br><span class="line"><span class="language-bash">        awslambdaric</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m pip install -r requirements.txt -t .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command can be overwritten by providing a different command in the template directly.</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/usr/bin/python3&quot;</span>, <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;awslambdaric&quot;</span> ]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.lambda_handler&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>こちらのDockerFileでも正常にビルドが通り、local invokeも問題ありませんでした。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sam local invoke</span><br><span class="line">Invoking Container created from helloworldfunction:python3.9-v1</span><br><span class="line">Building image.................</span><br><span class="line">Using local image: helloworldfunction:rapid-x86_64.</span><br><span class="line"></span><br><span class="line">END RequestId: 1305afc7-bce9-4e77-b7f3-ff77bf3b34ae</span><br><span class="line">&#123;&quot;statusCode&quot;: 200, &quot;body&quot;: &quot;&#123;\&quot;message\&quot;: \&quot;hello world\&quot;&#125;&quot;&#125;REPORT RequestId: 1305afc7-bce9-4e77-b7f3-ff77bf3b34ae     Init Duration: 0.34 ms  Duration: 157.30 ms     Billed Duration: 158 msMemory Size: 128 MB     Max Memory Used: 128 MB</span><br></pre></td></tr></table></figure>

<p>awslambdaric の Usageに、「linux2014ホイールをサポートしていない場合は、必要なビルド依存関係もインストールする必要があります」のような記載があるので、使用するOSによっては必要なのかもしれません。</p>
<h2 id="デプロイと動作確認"><a href="#デプロイと動作確認" class="headerlink" title="デプロイと動作確認"></a>デプロイと動作確認</h2><p>2023&#x2F;03&#x2F;19 追記</p>
<p>デプロイ確認していなかったので追記します。</p>
<p>sam deployコマンドをガイド使用で実行しました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sam deploy --guided</span><br><span class="line"></span><br><span class="line">Configuring SAM deploy</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">        Looking <span class="keyword">for</span> config file [samconfig.toml] :  Found</span><br><span class="line">        Reading default arguments  :  Success</span><br><span class="line"></span><br><span class="line">        Setting default arguments <span class="keyword">for</span> <span class="string">&#x27;sam deploy&#x27;</span></span><br><span class="line">        =========================================</span><br><span class="line">        Stack Name [sam-app]: </span><br><span class="line">        AWS Region [us-east-1]: ap-northeast-1</span><br><span class="line">        <span class="comment">#Shows you resources changes to be deployed and require a &#x27;Y&#x27; to initiate deploy</span></span><br><span class="line">        Confirm changes before deploy [Y/n]: </span><br><span class="line">        <span class="comment">#SAM needs permission to be able to create roles to connect to the resources in your template</span></span><br><span class="line">        Allow SAM CLI IAM role creation [Y/n]: </span><br><span class="line">        <span class="comment">#Preserves the state of previously provisioned resources when an operation fails</span></span><br><span class="line">        Disable rollback [y/N]: </span><br><span class="line">        HelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y</span><br><span class="line">        Save arguments to configuration file [Y/n]: </span><br><span class="line">        SAM configuration file [samconfig.toml]: </span><br><span class="line">        SAM configuration environment [default]: </span><br><span class="line"></span><br><span class="line">        Looking <span class="keyword">for</span> resources needed <span class="keyword">for</span> deployment:</span><br><span class="line"></span><br><span class="line">        Managed S3 bucket: aws-sam-cli-managed-default-samclisourcebucket-3uw8pxxxxxx</span><br><span class="line">        A different default S3 bucket can be <span class="built_in">set</span> <span class="keyword">in</span> samconfig.toml</span><br><span class="line">         Image repositories: Not found.</span><br><span class="line">         <span class="comment">#Managed repositories will be deleted when their functions are removed from the template and deployed</span></span><br><span class="line">         Create managed ECR repositories <span class="keyword">for</span> all <span class="built_in">functions</span>? [Y/n]: y</span><br><span class="line"></span><br><span class="line">527d44233031: Pushed </span><br><span class="line">1bfd440fd305: Pushed </span><br><span class="line">90ddf71bf98e: Pushed </span><br><span class="line">c6eabdd8bf04: Pushed </span><br><span class="line">f515ae579fe5: Pushed </span><br><span class="line">202fe64c3ce3: Pushed </span><br><span class="line">helloworldfunction-84e20c8b6b22-python3.9-v1: digest: sha256:90b7b576b36830b5c31c79ef81cdd61a4b54ed1aff598fa59f86e5988909f7ce size: 1577</span><br><span class="line"></span><br><span class="line">        Deploying with following values</span><br><span class="line">        ===============================</span><br><span class="line">        Stack name                   : sam-app</span><br><span class="line">        Region                       : ap-northeast-1</span><br><span class="line">        Confirm changeset            : True</span><br><span class="line">        Disable rollback             : False</span><br><span class="line">        Deployment image repository  : </span><br><span class="line">                                       &#123;</span><br><span class="line">                                           <span class="string">&quot;HelloWorldFunction&quot;</span>: <span class="string">&quot;123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/samapp7427b055/helloworldfunction19d43fc4repo&quot;</span></span><br><span class="line">                                       &#125;</span><br><span class="line">        Deployment s3 bucket         : aws-sam-cli-managed-default-samclisourcebucket-3uw8pxxxxxx</span><br><span class="line">        Capabilities                 : [<span class="string">&quot;CAPABILITY_IAM&quot;</span>]</span><br><span class="line">        Parameter overrides          : &#123;&#125;</span><br><span class="line">        Signing Profiles             : &#123;&#125;</span><br><span class="line"></span><br><span class="line">Initiating deployment</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">HelloWorldFunction may not have authorization defined.</span><br><span class="line">        Uploading to sam-app/4470b5f049d3dc4958aa2ba32e3b5067.template  1338 / 1338  (100.00%)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Waiting <span class="keyword">for</span> changeset to be created..</span><br><span class="line"></span><br><span class="line">CloudFormation stack changeset</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Operation                                      LogicalResourceId                              ResourceType                                   Replacement                                  </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">+ Add                                          HelloWorldFunctionHelloWorldPermissionProd     AWS::Lambda::Permission                        N/A                                          </span><br><span class="line">+ Add                                          HelloWorldFunctionRole                         AWS::IAM::Role                                 N/A                                          </span><br><span class="line">+ Add                                          HelloWorldFunction                             AWS::Lambda::Function                          N/A                                          </span><br><span class="line">+ Add                                          ServerlessRestApiDeployment47fc2d5f9d          AWS::ApiGateway::Deployment                    N/A                                          </span><br><span class="line">+ Add                                          ServerlessRestApiProdStage                     AWS::ApiGateway::Stage                         N/A                                          </span><br><span class="line">+ Add                                          ServerlessRestApi                              AWS::ApiGateway::RestApi                       N/A                                          </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Changeset created successfully. arn:aws:cloudformation:ap-northeast-1:123456789012:changeSet/samcli-deploy1679231685/14c3a52e-dc52-4cd3-a6e7-175ae9464787</span><br></pre></td></tr></table></figure>

<p>デプロイするかどうかを聞かれるので、yを選択します。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Previewing CloudFormation changeset before deployment</span><br><span class="line">======================================================</span><br><span class="line">Deploy this changeset? [y/N]: y</span><br><span class="line"></span><br><span class="line">2023-03-19 22:14:55 - Waiting for stack create/update to complete</span><br><span class="line"></span><br><span class="line">CloudFormation events from stack operations (refresh every 0.5 seconds)</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">ResourceStatus                                 ResourceType                                   LogicalResourceId                              ResourceStatusReason                         </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">CREATE_IN_PROGRESS                             AWS::IAM::Role                                 HelloWorldFunctionRole                         -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::IAM::Role                                 HelloWorldFunctionRole                         Resource creation Initiated                  </span><br><span class="line">CREATE_COMPLETE                                AWS::IAM::Role                                 HelloWorldFunctionRole                         -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::Lambda::Function                          HelloWorldFunction                             -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::Lambda::Function                          HelloWorldFunction                             Resource creation Initiated                  </span><br><span class="line">CREATE_COMPLETE                                AWS::Lambda::Function                          HelloWorldFunction                             -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::ApiGateway::RestApi                       ServerlessRestApi                              -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::ApiGateway::RestApi                       ServerlessRestApi                              Resource creation Initiated                  </span><br><span class="line">CREATE_COMPLETE                                AWS::ApiGateway::RestApi                       ServerlessRestApi                              -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::ApiGateway::Deployment                    ServerlessRestApiDeployment47fc2d5f9d          -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::Lambda::Permission                        HelloWorldFunctionHelloWorldPermissionProd     -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::Lambda::Permission                        HelloWorldFunctionHelloWorldPermissionProd     Resource creation Initiated                  </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::ApiGateway::Deployment                    ServerlessRestApiDeployment47fc2d5f9d          Resource creation Initiated                  </span><br><span class="line">CREATE_COMPLETE                                AWS::ApiGateway::Deployment                    ServerlessRestApiDeployment47fc2d5f9d          -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::ApiGateway::Stage                         ServerlessRestApiProdStage                     -                                            </span><br><span class="line">CREATE_IN_PROGRESS                             AWS::ApiGateway::Stage                         ServerlessRestApiProdStage                     Resource creation Initiated                  </span><br><span class="line">CREATE_COMPLETE                                AWS::ApiGateway::Stage                         ServerlessRestApiProdStage                     -                                            </span><br><span class="line">CREATE_COMPLETE                                AWS::Lambda::Permission                        HelloWorldFunctionHelloWorldPermissionProd     -                                            </span><br><span class="line">CREATE_COMPLETE                                AWS::CloudFormation::Stack                     sam-app                                        -                                            </span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">CloudFormation outputs from deployed stack</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Outputs                                                                                                                                                                                    </span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Key                 HelloWorldFunctionIamRole                                                                                                                                              </span><br><span class="line">Description         Implicit IAM Role created for Hello World function                                                                                                                     </span><br><span class="line">Value               arn:aws:iam::123456789012:role/sam-app-HelloWorldFunctionRole-1DUKMX2AJL0O4                                                                                            </span><br><span class="line"></span><br><span class="line">Key                 HelloWorldApi                                                                                                                                                          </span><br><span class="line">Description         API Gateway endpoint URL for Prod stage for Hello World function                                                                                                       </span><br><span class="line">Value               https://9b3ce2vfxj.execute-api.ap-northeast-1.amazonaws.com/Prod/hello/                                                                                                </span><br><span class="line"></span><br><span class="line">Key                 HelloWorldFunction                                                                                                                                                     </span><br><span class="line">Description         Hello World Lambda Function ARN                                                                                                                                        </span><br><span class="line">Value               arn:aws:lambda:ap-northeast-1:123456789012:function:sam-app-HelloWorldFunction-vKAnLRafGQsg                                                                            </span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Successfully created/updated stack - sam-app in ap-northeast-1</span><br></pre></td></tr></table></figure>

<p>curlコマンドでテストすると、hello worldが返ってきました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl  https://9b3ce2vfxj.execute-api.ap-northeast-1.amazonaws.com/Prod/hello/          </span><br><span class="line">&#123;&quot;message&quot;: &quot;hello world&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="環境の削除"><a href="#環境の削除" class="headerlink" title="環境の削除"></a>環境の削除</h2><p>最後に、環境を削除します。<br>コンテナイメージでデプロイしていると、ECRのリポジトリも削除するかどうかを聞かれるようです。</p>
<figure class="highlight plaintext"><figcaption><span>sam delete</span></figcaption><table><tr><td class="code"><pre><span class="line">        Are you sure you want to delete the stack sam-app in the region ap-northeast-1 ? [y/N]: y</span><br><span class="line">        Are you sure you want to delete the folder sam-app in S3 which contains the artifacts? [y/N]: y</span><br><span class="line">        Found ECR Companion Stack sam-app-7427b055-CompanionStack</span><br><span class="line">        Do you you want to delete the ECR companion stack sam-app-7427b055-CompanionStack in the region ap-northeast-1 ? [y/N]: y</span><br><span class="line">        ECR repository samapp7427b055/helloworldfunction19d43fc4repo may not be empty. Do you want to delete the repository and all the images in it ? [y/N]: y</span><br><span class="line">        - Deleting ECR repository samapp7427b055/helloworldfunction19d43fc4repo</span><br><span class="line">        - Deleting ECR Companion Stack sam-app-7427b055-CompanionStack</span><br><span class="line">        - Deleting S3 object with key sam-app/4470b5f049d3dc4958aa2ba32e3b5067.template</span><br><span class="line">        - Deleting Cloudformation stack sam-app</span><br><span class="line"></span><br><span class="line">Deleted successfully</span><br></pre></td></tr></table></figure>

<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>AWSが提供するLambda用コンテナイメージ以外のイメージ（代替イメージ）を使う場合には、依存ライブラリのインストールや、ENTRYPOINTの設定などが必要なことがわかりました。</p>
<p>今回はPython用を作成しましたが、node.js等もそのうち調べてみたいと思います。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Docker</tag>
        <tag>AWS</tag>
        <tag>AWS-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>sam deploy時にエラーではまった話</title>
    <url>/2023/03/20/aws-sam-container-lambda-deploy-issue/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>先の記事でコンテナLambdaを実行できるようになりました。</p>
<p><a href="2023/03/08/aws-sam-container-lambda/">AWS SAMでコンテナLambdaを作成する</a></p>
<p>その後、app.pyを修正して再度sam deployしたときに以下のエラーが表示され、<br>原因が分かるのに時間がかかったので、備忘録として記録しておきます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Only one of the following can be provided: &#x27;--image-repositories&#x27;, &#x27;--image-repository&#x27;, or &#x27;--resolve-image-repos&#x27;. Do you have multiple specified in the command or in a configuration file?</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="エラーの原因"><a href="#エラーの原因" class="headerlink" title="エラーの原因"></a>エラーの原因</h1><p>エラーの原因は samconfig.toml に、デフォルトで余計な設定が書かれており、<br>–guidedを使ってデプロイした時に追記されるパラメータと競合していたことが原因でした。</p>
<h1 id="samconfig-toml"><a href="#samconfig-toml" class="headerlink" title="samconfig.toml"></a>samconfig.toml</h1><h2 id="デフォルトの-samconfig-toml"><a href="#デフォルトの-samconfig-toml" class="headerlink" title="デフォルトの samconfig.toml"></a>デフォルトの samconfig.toml</h2><p>デフォルトでは samconfig.toml は以下の記載になっています。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># More information about the configuration file can be found here:</span></span><br><span class="line"><span class="comment"># https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html</span></span><br><span class="line"><span class="attr">version</span> = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="section">[default.global]</span></span><br><span class="line"><span class="section">[default.global.parameters]</span></span><br><span class="line"><span class="attr">stack_name</span> = <span class="string">&quot;sam-app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.build]</span></span><br><span class="line"><span class="section">[default.build.parameters]</span></span><br><span class="line"><span class="attr">parallel</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.validate]</span></span><br><span class="line"><span class="section">[default.validate.parameters]</span></span><br><span class="line"><span class="attr">lint</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.deploy]</span></span><br><span class="line"><span class="section">[default.deploy.parameters]</span></span><br><span class="line"><span class="attr">capabilities</span> = <span class="string">&quot;CAPABILITY_IAM&quot;</span></span><br><span class="line"><span class="attr">confirm_changeset</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_s3</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_image_repos</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.package]</span></span><br><span class="line"><span class="section">[default.package.parameters]</span></span><br><span class="line"><span class="attr">resolve_s3</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.sync]</span></span><br><span class="line"><span class="section">[default.sync.parameters]</span></span><br><span class="line"><span class="attr">watch</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.local_start_api]</span></span><br><span class="line"><span class="section">[default.local_start_api.parameters]</span></span><br><span class="line"><span class="attr">warm_containers</span> = <span class="string">&quot;EAGER&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.local_start_lambda]</span></span><br><span class="line"><span class="section">[default.local_start_lambda.parameters]</span></span><br><span class="line"><span class="attr">warm_containers</span> = <span class="string">&quot;EAGER&quot;</span></span><br></pre></td></tr></table></figure>

<p>注目すべきは、以下の記載箇所です</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[default.deploy]</span></span><br><span class="line"><span class="section">[default.deploy.parameters]</span></span><br><span class="line"><span class="attr">capabilities</span> = <span class="string">&quot;CAPABILITY_IAM&quot;</span></span><br><span class="line"><span class="attr">confirm_changeset</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_s3</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_image_repos</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h2 id="sam-deploy-–guided-コマンドでデプロイ"><a href="#sam-deploy-–guided-コマンドでデプロイ" class="headerlink" title="sam deploy –guided コマンドでデプロイ"></a>sam deploy –guided コマンドでデプロイ</h2><p>以下のように、sam deploy –guidedコマンドでデプロイします。</p>
<p>途中の選択肢はハンズオンやSAMのチュートリアルでよく見かける選択と同じです。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sam deploy --guided</span><br><span class="line"></span><br><span class="line">Configuring SAM deploy</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">        Looking <span class="keyword">for</span> config file [samconfig.toml] :  Found</span><br><span class="line">        Reading default arguments  :  Success</span><br><span class="line"></span><br><span class="line">        Setting default arguments <span class="keyword">for</span> <span class="string">&#x27;sam deploy&#x27;</span></span><br><span class="line">        =========================================</span><br><span class="line">        Stack Name [sam-app]: </span><br><span class="line">        AWS Region [us-east-1]: ap-northeast-1</span><br><span class="line">        <span class="comment">#Shows you resources changes to be deployed and require a &#x27;Y&#x27; to initiate deploy</span></span><br><span class="line">        Confirm changes before deploy [Y/n]: </span><br><span class="line">        <span class="comment">#SAM needs permission to be able to create roles to connect to the resources in your template</span></span><br><span class="line">        Allow SAM CLI IAM role creation [Y/n]: </span><br><span class="line">        <span class="comment">#Preserves the state of previously provisioned resources when an operation fails</span></span><br><span class="line">        Disable rollback [y/N]: </span><br><span class="line">        HelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y</span><br><span class="line">        Save arguments to configuration file [Y/n]: </span><br><span class="line">        SAM configuration file [samconfig.toml]: </span><br><span class="line">        SAM configuration environment [default]: </span><br><span class="line"></span><br><span class="line">        Looking <span class="keyword">for</span> resources needed <span class="keyword">for</span> deployment:</span><br><span class="line"></span><br><span class="line">        Managed S3 bucket: aws-sam-cli-managed-default-samclisourcebucket-1234567890</span><br><span class="line">        A different default S3 bucket can be <span class="built_in">set</span> <span class="keyword">in</span> samconfig.toml</span><br><span class="line">         Image repositories: Not found.</span><br><span class="line">         <span class="comment">#Managed repositories will be deleted when their functions are removed from the template and deployed</span></span><br><span class="line">         Create managed ECR repositories <span class="keyword">for</span> all <span class="built_in">functions</span>? [Y/n]: </span><br><span class="line"></span><br><span class="line">        Parameter <span class="string">&quot;stack_name=sam-app&quot;</span> <span class="keyword">in</span> [default.deploy.parameters] is defined as a global parameter [default.global.parameters].</span><br><span class="line">        This parameter will be only saved under [default.global.parameters] <span class="keyword">in</span> /home/user/Project/sam-app/samconfig.toml.</span><br><span class="line"></span><br><span class="line">        Saved arguments to config file</span><br><span class="line">        Running <span class="string">&#x27;sam deploy&#x27;</span> <span class="keyword">for</span> future deployments will use the parameters saved above.</span><br><span class="line">        The above parameters can be changed by modifying samconfig.toml</span><br><span class="line">        Learn more about samconfig.toml syntax at </span><br><span class="line">        https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html</span><br></pre></td></tr></table></figure>


<h2 id="デプロイ後の-samconfig-toml"><a href="#デプロイ後の-samconfig-toml" class="headerlink" title="デプロイ後の samconfig.toml"></a>デプロイ後の samconfig.toml</h2><p>デプロイ後には samconfig.toml は以下の記載になっていました。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># More information about the configuration file can be found here:</span></span><br><span class="line"><span class="comment"># https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html</span></span><br><span class="line"><span class="attr">version</span> = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="section">[default.global]</span></span><br><span class="line"><span class="section">[default.global.parameters]</span></span><br><span class="line"><span class="attr">stack_name</span> = <span class="string">&quot;sam-app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.build]</span></span><br><span class="line"><span class="section">[default.build.parameters]</span></span><br><span class="line"><span class="attr">parallel</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.validate]</span></span><br><span class="line"><span class="section">[default.validate.parameters]</span></span><br><span class="line"><span class="attr">lint</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.deploy]</span></span><br><span class="line"><span class="section">[default.deploy.parameters]</span></span><br><span class="line"><span class="attr">capabilities</span> = <span class="string">&quot;CAPABILITY_IAM&quot;</span></span><br><span class="line"><span class="attr">confirm_changeset</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_s3</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_image_repos</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">s3_bucket</span> = <span class="string">&quot;aws-sam-cli-managed-default-samclisourcebucket-1234567890&quot;</span></span><br><span class="line"><span class="attr">s3_prefix</span> = <span class="string">&quot;sam-app&quot;</span></span><br><span class="line"><span class="attr">region</span> = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line"><span class="attr">image_repositories</span> = [<span class="string">&quot;HelloWorldFunction=123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/samapp2b0162595/helloworldfunction19d43fc4repo&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[default.package]</span></span><br><span class="line"><span class="section">[default.package.parameters]</span></span><br><span class="line"><span class="attr">resolve_s3</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.sync]</span></span><br><span class="line"><span class="section">[default.sync.parameters]</span></span><br><span class="line"><span class="attr">watch</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.local_start_api]</span></span><br><span class="line"><span class="section">[default.local_start_api.parameters]</span></span><br><span class="line"><span class="attr">warm_containers</span> = <span class="string">&quot;EAGER&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[default.local_start_lambda]</span></span><br><span class="line"><span class="section">[default.local_start_lambda.parameters]</span></span><br><span class="line"><span class="attr">warm_containers</span> = <span class="string">&quot;EAGER&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注目すべきは、以下の記載箇所です</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[default.deploy]</span></span><br><span class="line"><span class="section">[default.deploy.parameters]</span></span><br><span class="line"><span class="attr">capabilities</span> = <span class="string">&quot;CAPABILITY_IAM&quot;</span></span><br><span class="line"><span class="attr">confirm_changeset</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_s3</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">resolve_image_repos</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">s3_bucket</span> = <span class="string">&quot;aws-sam-cli-managed-default-samclisourcebucket-1234567890&quot;</span></span><br><span class="line"><span class="attr">s3_prefix</span> = <span class="string">&quot;sam-app&quot;</span></span><br><span class="line"><span class="attr">region</span> = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line"><span class="attr">image_repositories</span> = [<span class="string">&quot;HelloWorldFunction=123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/samapp2b0162595/helloworldfunction19d43fc4repo&quot;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="重複不可のパラメータ"><a href="#重複不可のパラメータ" class="headerlink" title="重複不可のパラメータ"></a>重複不可のパラメータ</h2><p>最初に記載した通りですが、エラーメッセージは以下の通りです。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Only one of the following can be provided: &#x27;--image-repositories&#x27;, &#x27;--image-repository&#x27;, or &#x27;--resolve-image-repos&#x27;. Do you have multiple specified in the command or in a configuration file?</span><br></pre></td></tr></table></figure>

<p>‘–image-repositories’、’–image-repository’、’–resolve-image-repos’は、<br>どれか1個だけを指定できますが、samconfig.toml には重複して記載されていました。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[default.deploy]</span></span><br><span class="line"><span class="section">[default.deploy.parameters]</span></span><br><span class="line">(中略)</span><br><span class="line"><span class="attr">resolve_image_repos</span> = <span class="literal">true</span></span><br><span class="line">(中略)</span><br><span class="line"><span class="attr">image_repositories</span> = [<span class="string">&quot;HelloWorldFunction=123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/samapp2b0162595/helloworldfunction19d43fc4repo&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>resolve_image_repos &#x3D; true が不要なので削除します。</p>
<p>これを削除して、sam deployをすると、今度はs3でエラーが出るかと思います。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sam deploy</span><br><span class="line">Error: Cannot use both --resolve-s3 and --s3-bucket parameters <span class="keyword">in</span> non-guided deployments. Please use only one or use the --guided option <span class="keyword">for</span> a guided deployment.</span><br></pre></td></tr></table></figure>

<p>こちらも “resolve_s3 &#x3D; true” が不要なので削除します。</p>
<p>最終的に、samconfig.toml を以下のようにしました。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[default.deploy]</span></span><br><span class="line"><span class="section">[default.deploy.parameters]</span></span><br><span class="line"><span class="attr">capabilities</span> = <span class="string">&quot;CAPABILITY_IAM&quot;</span></span><br><span class="line"><span class="attr">confirm_changeset</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">s3_bucket</span> = <span class="string">&quot;aws-sam-cli-managed-default-samclisourcebucket-1234567890&quot;</span></span><br><span class="line"><span class="attr">s3_prefix</span> = <span class="string">&quot;sam-app&quot;</span></span><br><span class="line"><span class="attr">region</span> = <span class="string">&quot;ap-northeast-1&quot;</span></span><br><span class="line"><span class="attr">image_repositories</span> = [<span class="string">&quot;HelloWorldFunction=123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/samapp2b0162595/helloworldfunction19d43fc4repo&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>これで、sam deploy が通るようになりました。</p>
<h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>samconfig.tomlをよく見ている人はすぐに気が付くのかもしれませんが、<br>私はまだSAMを触り始めたばかりだったのでエラーメッセージの原因を見つけるのに時間がかかりました。</p>
<p>1回目のsam deployは成功するのに、2回目以降は成功しないことから、<br>何度かsam initからやり直して変化するファイルを探してようやくエラーメッセージの意味を理解しました。</p>
<p>この記事が同様に詰まっている方の助けになれば幸いです。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Docker</tag>
        <tag>AWS</tag>
        <tag>AWS-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Amplify のチュートリアルをやってみた時に詰まったところのメモ</title>
    <url>/2023/11/26/aws-amplify-react-tutorial/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>DynamoDBの中身を扱うツールが欲しくなったので、<br>今更ですがAmplifyを使ってみようと思い、公式のチュートリアルをやってみました。</p>
<p>ちなみにReactも触ったことがなく、今回初めて使っているので勘違いしている部分があるかもしれませんが、ご了承ください。</p>
<p>チュートリアルが作成された当時に比べてAmplifyのバージョンが上がっているせいか、所々でエラーが出ていたので、調べた記録を残しておくことにしました。</p>
<h2 id="実施したチュートリアルとエラーの概要"><a href="#実施したチュートリアルとエラーの概要" class="headerlink" title="実施したチュートリアルとエラーの概要"></a>実施したチュートリアルとエラーの概要</h2><p>今回試したのは以下のチュートリアルです。</p>
<ul>
<li><a href="https://aws.amazon.com/jp/getting-started/hands-on/build-react-app-amplify-graphql/">フルスタック React アプリケーションを構築する</a></li>
</ul>
<p>エラーの概要としては、「<a href="https://aws.amazon.com/jp/getting-started/hands-on/build-react-app-amplify-graphql/module-four/">モジュール 4: GraphQL API とデータベースを追加する</a>」で、以下のようにimportする部分があるのですが、amplifyのライブラリがバージョンアップして使い方が変わっているようで、このままコピペするとエラーが出ました。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">API</span> &#125; <span class="keyword">from</span> <span class="string">&quot;aws-amplify&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>Amplify Dev Centerのドキュメントを参考にして修正したところ正常に動作したので、<br>おそらくこれで合っているのだろうと思っています。</p>
<ul>
<li><a href="https://docs.amplify.aws/javascript/build-a-backend/graphqlapi/connect-to-api/#use-generated-graphql-queries-mutations-and-subscriptions">(参考) Use generated GraphQL queries, mutations, and subscriptions</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; generateClient &#125; <span class="keyword">from</span> <span class="string">&#x27;aws-amplify/api&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>詳細は続きを見てください。</p>
<span id="more"></span>

<h1 id="遭遇したエラーたち"><a href="#遭遇したエラーたち" class="headerlink" title="遭遇したエラーたち"></a>遭遇したエラーたち</h1><h2 id="「モジュール-4-GraphQL-API-とデータベースを追加する」で遭遇したエラー"><a href="#「モジュール-4-GraphQL-API-とデータベースを追加する」で遭遇したエラー" class="headerlink" title="「モジュール 4: GraphQL API とデータベースを追加する」で遭遇したエラー"></a>「モジュール 4: GraphQL API とデータベースを追加する」で遭遇したエラー</h2><p>「API と相互にやり取りするためのフロントエンドコードを記述する」のチュートリアル<br>に記載されている src&#x2F;App.js をそのままコピペして npm start を実行すると、<br>以下のようなエラーが出ました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to compile.</span><br><span class="line"></span><br><span class="line">Attempted import error: &#x27;API&#x27; is not exported from &#x27;aws-amplify&#x27; (imported as &#x27;API&#x27;).</span><br><span class="line">ERROR in ./src/App.js 22:26-37</span><br><span class="line">export &#x27;API&#x27; (imported as &#x27;API&#x27;) was not found in &#x27;aws-amplify&#x27; (possible exports: Amplify)</span><br><span class="line"></span><br><span class="line">ERROR in ./src/App.js 35:10-21</span><br><span class="line">export &#x27;API&#x27; (imported as &#x27;API&#x27;) was not found in &#x27;aws-amplify&#x27; (possible exports: Amplify)</span><br><span class="line"></span><br><span class="line">ERROR in ./src/App.js 49:10-21</span><br><span class="line">export &#x27;API&#x27; (imported as &#x27;API&#x27;) was not found in &#x27;aws-amplify&#x27; (possible exports: Amplify)</span><br><span class="line"></span><br><span class="line">webpack compiled with 3 errors</span><br></pre></td></tr></table></figure>


<p>冒頭にも述べましたが、以下のドキュメントによると、</p>
<ul>
<li><a href="https://docs.amplify.aws/javascript/build-a-backend/graphqlapi/connect-to-api/#use-generated-graphql-queries-mutations-and-subscriptions">(参考) Use generated GraphQL queries, mutations, and subscriptions</a></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">API</span> &#125; <span class="keyword">from</span> <span class="string">&quot;aws-amplify&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>とするのではなく、以下のように import したうえで const で client を宣言して、<br>graphqlのメソッドを呼び出すように書いてありました。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; generateClient &#125; <span class="keyword">from</span> <span class="string">&#x27;aws-amplify/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createTodo, updateTodo, deleteTodo &#125; <span class="keyword">from</span> <span class="string">&#x27;./graphql/mutations&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="title function_">generateClient</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo = &#123; <span class="attr">name</span>: <span class="string">&#x27;My first todo&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;Hello world!&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create a todo */</span></span><br><span class="line"><span class="keyword">await</span> client.<span class="title function_">graphql</span>(&#123;</span><br><span class="line">  <span class="attr">query</span>: createTodo,</span><br><span class="line">  <span class="attr">variables</span>: &#123;</span><br><span class="line">    <span class="attr">input</span>: todo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(以下略)</span><br></pre></td></tr></table></figure>

<p>そこで、以下のように変更したところ、エラーが解消されて正常に動作しました。</p>
<p>よくよく見ると <code>query: createNoteMutation</code> あたりも変更が必要そうな気がしたのですが、とりあえず動いたので今回は考えないことにしました。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &quot;react&quot;;</span><br><span class="line">import &quot;./App.css&quot;;</span><br><span class="line">import &quot;@aws-amplify/ui-react/styles.css&quot;;</span><br><span class="line"><span class="deletion">- import &#123; API &#125; from &quot;aws-amplify&quot;;</span></span><br><span class="line"><span class="addition">+ import &#123; generateClient &#125; from &quot;aws-amplify/api&quot;;</span></span><br><span class="line">import &#123;</span><br><span class="line">  Button,</span><br><span class="line">  Flex,</span><br><span class="line">  Heading,</span><br><span class="line">  Text,</span><br><span class="line">  TextField,</span><br><span class="line">  View,</span><br><span class="line">  withAuthenticator,</span><br><span class="line">&#125; from &quot;@aws-amplify/ui-react&quot;;</span><br><span class="line">import &#123; listNotes &#125; from &quot;./graphql/queries&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  createNote as createNoteMutation,</span><br><span class="line">  deleteNote as deleteNoteMutation,</span><br><span class="line">&#125; from &quot;./graphql/mutations&quot;;</span><br><span class="line"></span><br><span class="line">const App = (&#123; signOut &#125;) =&gt; &#123;</span><br><span class="line">  const [notes, setNotes] = useState([]);</span><br><span class="line"><span class="addition">+ const client = generateClient();</span></span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    fetchNotes();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  async function fetchNotes() &#123;</span><br><span class="line"><span class="deletion">-   const apiData = await API.graphql(&#123; query: listNotes &#125;);</span></span><br><span class="line"><span class="addition">+   const apiData = await client.graphql(&#123; query: listNotes &#125;);</span></span><br><span class="line">    const notesFromAPI = apiData.data.listNotes.items;</span><br><span class="line">    setNotes(notesFromAPI);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async function createNote(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    const form = new FormData(event.target);</span><br><span class="line">    const data = &#123;</span><br><span class="line">      name: form.get(&quot;name&quot;),</span><br><span class="line">      description: form.get(&quot;description&quot;),</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="deletion">-   await API.graphql(&#123;</span></span><br><span class="line"><span class="addition">+   await client.graphql(&#123;</span></span><br><span class="line">      query: createNoteMutation,</span><br><span class="line">      variables: &#123; input: data &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    fetchNotes();</span><br><span class="line">    event.target.reset();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async function deleteNote(&#123; id &#125;) &#123;</span><br><span class="line">    const newNotes = notes.filter((note) =&gt; note.id !== id);</span><br><span class="line">    setNotes(newNotes);</span><br><span class="line"><span class="deletion">-   await API.graphql(&#123;</span></span><br><span class="line"><span class="addition">+   await client.graphql(&#123;</span></span><br><span class="line">      query: deleteNoteMutation,</span><br><span class="line">      variables: &#123; input: &#123; id &#125; &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;Heading level=&#123;1&#125;&gt;My Notes App&lt;/Heading&gt;</span><br><span class="line">      &lt;View as=&quot;form&quot; margin=&quot;3rem 0&quot; onSubmit=&#123;createNote&#125;&gt;</span><br><span class="line">        &lt;Flex direction=&quot;row&quot; justifyContent=&quot;center&quot;&gt;</span><br><span class="line">          &lt;TextField</span><br><span class="line">            name=&quot;name&quot;</span><br><span class="line">            placeholder=&quot;Note Name&quot;</span><br><span class="line">            label=&quot;Note Name&quot;</span><br><span class="line">            labelHidden</span><br><span class="line">            variation=&quot;quiet&quot;</span><br><span class="line">            required</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;TextField</span><br><span class="line">            name=&quot;description&quot;</span><br><span class="line">            placeholder=&quot;Note Description&quot;</span><br><span class="line">            label=&quot;Note Description&quot;</span><br><span class="line">            labelHidden</span><br><span class="line">            variation=&quot;quiet&quot;</span><br><span class="line">            required</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Button type=&quot;submit&quot; variation=&quot;primary&quot;&gt;</span><br><span class="line">            Create Note</span><br><span class="line">          &lt;/Button&gt;</span><br><span class="line">        &lt;/Flex&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &lt;Heading level=&#123;2&#125;&gt;Current Notes&lt;/Heading&gt;</span><br><span class="line">      &lt;View margin=&quot;3rem 0&quot;&gt;</span><br><span class="line">        &#123;notes.map((note) =&gt; (</span><br><span class="line">          &lt;Flex</span><br><span class="line">            key=&#123;note.id || note.name&#125;</span><br><span class="line">            direction=&quot;row&quot;</span><br><span class="line">            justifyContent=&quot;center&quot;</span><br><span class="line">            alignItems=&quot;center&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;Text as=&quot;strong&quot; fontWeight=&#123;700&#125;&gt;</span><br><span class="line">              &#123;note.name&#125;</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">            &lt;Text as=&quot;span&quot;&gt;&#123;note.description&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;Button variation=&quot;link&quot; onClick=&#123;() =&gt; deleteNote(note)&#125;&gt;</span><br><span class="line">              Delete note</span><br><span class="line">            &lt;/Button&gt;</span><br><span class="line">          &lt;/Flex&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &lt;Button onClick=&#123;signOut&#125;&gt;Sign Out&lt;/Button&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default withAuthenticator(App);</span><br></pre></td></tr></table></figure>


<h2 id="「モジュール-5-ストレージを追加する」で遭遇したエラー"><a href="#「モジュール-5-ストレージを追加する」で遭遇したエラー" class="headerlink" title="「モジュール 5: ストレージを追加する」で遭遇したエラー"></a>「モジュール 5: ストレージを追加する」で遭遇したエラー</h2><p>モジュール4とほぼ同じですが、<br>ここでも「React アプリケーションを更新する」のチュートリアル<br>に記載されている src&#x2F;App.js をそのままコピペして npm start を実行したところ、<br>以下のようなエラーが出ました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failed to compile.</span><br><span class="line"></span><br><span class="line">Attempted import error: &#x27;Storage&#x27; is not exported from &#x27;aws-amplify&#x27; (imported as &#x27;Storage&#x27;).</span><br><span class="line">ERROR in ./src/App.js 30:26-37</span><br><span class="line">export &#x27;Storage&#x27; (imported as &#x27;Storage&#x27;) was not found in &#x27;aws-amplify&#x27; (possible exports: Amplify)</span><br><span class="line"></span><br><span class="line">ERROR in ./src/App.js 46:28-39</span><br><span class="line">export &#x27;Storage&#x27; (imported as &#x27;Storage&#x27;) was not found in &#x27;aws-amplify&#x27; (possible exports: Amplify)</span><br><span class="line"></span><br><span class="line">ERROR in ./src/App.js 62:10-24</span><br><span class="line">export &#x27;Storage&#x27; (imported as &#x27;Storage&#x27;) was not found in &#x27;aws-amplify&#x27; (possible exports: Amplify)</span><br><span class="line"></span><br><span class="line">webpack compiled with 3 errors</span><br></pre></td></tr></table></figure>

<p>今回は、ドキュメントのストレージの説明を参照します。</p>
<ul>
<li><a href="https://docs.amplify.aws/javascript/build-a-backend/storage/upload/">(参考) Upload files</a></li>
<li><a href="https://docs.amplify.aws/javascript/build-a-backend/storage/download/">(参考) Download files</a></li>
<li><a href="https://docs.amplify.aws/javascript/build-a-backend/storage/remove/">(参考) Remove files</a></li>
</ul>
<p>チュートリアルのコードは以下のような呼び出し方になっていますが、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Storage</span> &#125; <span class="keyword">from</span> <span class="string">&quot;aws-amplify&quot;</span>;</span><br><span class="line"></span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="keyword">await</span> <span class="title class_">Storage</span>.<span class="title function_">get</span>(note.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!!data.<span class="property">image</span>) <span class="keyword">await</span> <span class="title class_">Storage</span>.<span class="title function_">put</span>(data.<span class="property">name</span>, image);</span><br><span class="line"></span><br><span class="line">(中略)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Storage</span>.<span class="title function_">remove</span>(name);</span><br><span class="line"></span><br><span class="line">(以下略)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ここもドキュメントを参照すると変更があったようで、以下のように import して使うように書かれています。</p>
<p>下記は getUrl だけを抜粋してドキュメントから転記しましたが、 uploadData, remove も同様です。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUrl &#125; <span class="keyword">from</span> <span class="string">&#x27;aws-amplify/storage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUrlResult = <span class="keyword">await</span> <span class="title function_">getUrl</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: filename,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    accessLevel?: <span class="string">&#x27;guest&#x27;</span> , <span class="comment">// can be &#x27;private&#x27;, &#x27;protected&#x27;, or &#x27;guest&#x27; but defaults to `guest`</span></span><br><span class="line">    targetIdentityId?: <span class="string">&#x27;XXXXXXX&#x27;</span>, <span class="comment">// id of another user, if `accessLevel` is `guest`</span></span><br><span class="line">    validateObjectExistence?: <span class="literal">false</span>,  <span class="comment">// defaults to false</span></span><br><span class="line">    expiresIn?: <span class="number">20</span> <span class="comment">// validity of the URL, in seconds. defaults to 900 (15 minutes) and maxes at 3600 (1 hour)</span></span><br><span class="line">    useAccelerateEndpoint?: <span class="literal">true</span>; <span class="comment">// Whether to use accelerate endpoint.</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;signed URL: &#x27;</span>, getUrlResult.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;URL expires at: &#x27;</span>, getUrlResult.<span class="property">expiresAt</span>);</span><br></pre></td></tr></table></figure>

<p>ドキュメントに倣って、以下のように変更したところエラーが解消されて正常に動作しました。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &quot;react&quot;;</span><br><span class="line">import &quot;./App.css&quot;;</span><br><span class="line">import &quot;@aws-amplify/ui-react/styles.css&quot;;</span><br><span class="line">import &#123; generateClient &#125; from &quot;aws-amplify/api&quot;;</span><br><span class="line"><span class="deletion">- import &#123; Storage &#125; from &quot;aws-amplify&quot;;</span></span><br><span class="line"><span class="addition">+ import &#123; uploadData, getUrl, remove &#125; from &quot;aws-amplify/storage&quot;;</span></span><br><span class="line">import &#123;</span><br><span class="line">  Button,</span><br><span class="line">  Flex,</span><br><span class="line">  Heading,</span><br><span class="line">  Image,</span><br><span class="line">  Text,</span><br><span class="line">  TextField,</span><br><span class="line">  View,</span><br><span class="line">  withAuthenticator,</span><br><span class="line">&#125; from &quot;@aws-amplify/ui-react&quot;;</span><br><span class="line">import &#123; listNotes &#125; from &quot;./graphql/queries&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  createNote as createNoteMutation,</span><br><span class="line">  deleteNote as deleteNoteMutation,</span><br><span class="line">&#125; from &quot;./graphql/mutations&quot;;</span><br><span class="line"></span><br><span class="line">const App = (&#123; signOut &#125;) =&gt; &#123;</span><br><span class="line">  const client = generateClient();</span><br><span class="line">  const [notes, setNotes] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    fetchNotes();</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  async function fetchNotes() &#123;</span><br><span class="line">    const apiData = await client.graphql(&#123; query: listNotes &#125;);</span><br><span class="line">    const notesFromAPI = apiData.data.listNotes.items;</span><br><span class="line">    await Promise.all(</span><br><span class="line">      notesFromAPI.map(async (note) =&gt; &#123;</span><br><span class="line">        if (note.image) &#123;</span><br><span class="line"><span class="deletion">-         const url = await Storage.get(note.name);</span></span><br><span class="line"><span class="deletion">-         note.image = url;</span></span><br><span class="line"><span class="addition">+         const getUrlResult = await getUrl(&#123; key: note.name &#125;);</span></span><br><span class="line"><span class="addition">+         note.image = getUrlResult.url;</span></span><br><span class="line">        &#125;</span><br><span class="line">        return note;</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    setNotes(notesFromAPI);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async function createNote(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    const form = new FormData(event.target);</span><br><span class="line">    const image = form.get(&quot;image&quot;);</span><br><span class="line">    const data = &#123;</span><br><span class="line">      name: form.get(&quot;name&quot;),</span><br><span class="line">      description: form.get(&quot;description&quot;),</span><br><span class="line">      image: image.name,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="deletion">-   if (!!data.image) await Storage.put(data.name, image);</span></span><br><span class="line"><span class="addition">+   if (!!data.image) &#123;</span></span><br><span class="line"><span class="addition">+     try &#123;</span></span><br><span class="line"><span class="addition">+       const result = await uploadData(&#123;</span></span><br><span class="line"><span class="addition">+         key: data.name,</span></span><br><span class="line"><span class="addition">+         data: image</span></span><br><span class="line"><span class="addition">+       &#125;).result;</span></span><br><span class="line"><span class="addition">+       console.log(&#x27;Succeeded: &#x27;, result);</span></span><br><span class="line"><span class="addition">+     &#125; catch (error) &#123;</span></span><br><span class="line"><span class="addition">+       console.log(&#x27;Error : &#x27;, error);</span></span><br><span class="line"><span class="addition">+     &#125;</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    await client.graphql(&#123;</span><br><span class="line">      query: createNoteMutation,</span><br><span class="line">      variables: &#123; input: data &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    fetchNotes();</span><br><span class="line">    event.target.reset();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async function deleteNote(&#123; id, name &#125;) &#123;</span><br><span class="line">    const newNotes = notes.filter((note) =&gt; note.id !== id);</span><br><span class="line">    setNotes(newNotes);</span><br><span class="line"><span class="deletion">-   await Storage.remove(name);</span></span><br><span class="line"><span class="addition">+   try &#123;</span></span><br><span class="line"><span class="addition">+     await remove(&#123; key: name &#125;);</span></span><br><span class="line"><span class="addition">+   &#125; catch (error) &#123;</span></span><br><span class="line"><span class="addition">+     console.log(&#x27;Error &#x27;, error);</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">    await client.graphql(&#123;</span><br><span class="line">      query: deleteNoteMutation,</span><br><span class="line">      variables: &#123; input: &#123; id &#125; &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;Heading level=&#123;1&#125;&gt;My Notes App&lt;/Heading&gt;</span><br><span class="line">      &lt;View as=&quot;form&quot; margin=&quot;3rem 0&quot; onSubmit=&#123;createNote&#125;&gt;</span><br><span class="line">        &lt;Flex direction=&quot;row&quot; justifyContent=&quot;center&quot;&gt;</span><br><span class="line">          &lt;TextField</span><br><span class="line">            name=&quot;name&quot;</span><br><span class="line">            placeholder=&quot;Note Name&quot;</span><br><span class="line">            label=&quot;Note Name&quot;</span><br><span class="line">            labelHidden</span><br><span class="line">            variation=&quot;quiet&quot;</span><br><span class="line">            required</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;TextField</span><br><span class="line">            name=&quot;description&quot;</span><br><span class="line">            placeholder=&quot;Note Description&quot;</span><br><span class="line">            label=&quot;Note Description&quot;</span><br><span class="line">            labelHidden</span><br><span class="line">            variation=&quot;quiet&quot;</span><br><span class="line">            required</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;View</span><br><span class="line">            name=&quot;image&quot;</span><br><span class="line">            as=&quot;input&quot;</span><br><span class="line">            type=&quot;file&quot;</span><br><span class="line">            style=&#123;&#123; alignSelf: &quot;end&quot; &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Button type=&quot;submit&quot; variation=&quot;primary&quot;&gt;</span><br><span class="line">            Create Note</span><br><span class="line">          &lt;/Button&gt;</span><br><span class="line">        &lt;/Flex&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &lt;Heading level=&#123;2&#125;&gt;Current Notes&lt;/Heading&gt;</span><br><span class="line">      &lt;View margin=&quot;3rem 0&quot;&gt;</span><br><span class="line">        &#123;notes.map((note) =&gt; (</span><br><span class="line">          &lt;Flex</span><br><span class="line">            key=&#123;note.id || note.name&#125;</span><br><span class="line">            direction=&quot;row&quot;</span><br><span class="line">            justifyContent=&quot;center&quot;</span><br><span class="line">            alignItems=&quot;center&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;Text as=&quot;strong&quot; fontWeight=&#123;700&#125;&gt;</span><br><span class="line">              &#123;note.name&#125;</span><br><span class="line">            &lt;/Text&gt;</span><br><span class="line">            &lt;Text as=&quot;span&quot;&gt;&#123;note.description&#125;&lt;/Text&gt;</span><br><span class="line">            &#123;note.image &amp;&amp; (</span><br><span class="line">              &lt;Image</span><br><span class="line">                src=&#123;note.image&#125;</span><br><span class="line">                alt=&#123;`visual aid for $&#123;notes.name&#125;`&#125;</span><br><span class="line">                style=&#123;&#123; width: 400 &#125;&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">            &lt;Button variation=&quot;link&quot; onClick=&#123;() =&gt; deleteNote(note)&#125;&gt;</span><br><span class="line">              Delete note</span><br><span class="line">            &lt;/Button&gt;</span><br><span class="line">          &lt;/Flex&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &lt;Button onClick=&#123;signOut&#125;&gt;Sign Out&lt;/Button&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default withAuthenticator(App);</span><br></pre></td></tr></table></figure>


<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>AmplifyとReactを初めて触ったのと、javascriptもあまり触ったことが無い状態から始めたものの、<br>特に困難な部分もなくチュートリアルを完了できたので、初心者に優しい良いチュートリアルだと思いました。</p>
<p>特に、認証機能の追加が非常に簡単に行えたのは便利ですね、実際に今後作るツールでも活用したいと感じました。</p>
<p>気になったのは、将来的に開発環境を作り直したとき、バージョン差分がどう影響してくるのか(自分が)理解できてない点です。</p>
<p>Reactやnpmについて勉強し、一般的な考え方ややり方を理解していくことにします。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>AWS</category>
        <category>Framework</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>AWS-Amplify</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerを使ったRedmine環境の構築</title>
    <url>/2023/12/10/docker-redmine-install/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Redmineの公式Dockerイメージと、MySQLの公式Dockerイメージを使用して、Hyper-vに立てたAlpine上にRedmine環境を構築した時のメモです。<br>仕事でRedmineを使うことが多く、自分が好きにいじれる環境が欲しかったのと、DockerやDocker-composeの勉強もしたかったので、試しに作ってみました。</p>
<h1 id="成果物"><a href="#成果物" class="headerlink" title="成果物"></a>成果物</h1><p>今回作成した成果物をGithubで公開しています。</p>
<ul>
<li><a href="https://github.com/hiroaki-ma1203/docker-redmine-install">https://github.com/hiroaki-ma1203/docker-redmine-install</a></li>
</ul>
<span id="more"></span>


<h1 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h1><p>下記のサイトを参考にしました、感謝。</p>
<h2 id="Redmineの構築に関して"><a href="#Redmineの構築に関して" class="headerlink" title="Redmineの構築に関して"></a>Redmineの構築に関して</h2><ul>
<li>Redmine公式DockerHub<ul>
<li><a href="https://hub.docker.com/_/redmine/">https://hub.docker.com/_/redmine/</a></li>
</ul>
</li>
<li>MySQL公式DockerHub<ul>
<li><a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></li>
</ul>
</li>
<li>先人たちのサイト<ul>
<li><a href="https://qiita.com/piityan1126/items/5522a7d0514cb64728a5">https://qiita.com/piityan1126/items/5522a7d0514cb64728a5</a></li>
<li><a href="https://zenn.dev/isi00141/articles/c8c883f7e33647">https://zenn.dev/isi00141/articles/c8c883f7e33647</a></li>
<li><a href="https://glodia.jp/blog/11799/">https://glodia.jp/blog/11799/</a></li>
</ul>
</li>
</ul>
<h2 id="Redmineのプラグインに関して"><a href="#Redmineのプラグインに関して" class="headerlink" title="Redmineのプラグインに関して"></a>Redmineのプラグインに関して</h2><ul>
<li>kanbanプラグイン<ul>
<li><a href="https://github.com/happy-se-life/kanban">https://github.com/happy-se-life/kanban</a></li>
</ul>
</li>
<li>A1テーマ<ul>
<li><a href="https://www.redmineup.com/pages/ja/themes/a1">https://www.redmineup.com/pages/ja/themes/a1</a></li>
</ul>
</li>
</ul>
<h1 id="Docker-Redmineの構成"><a href="#Docker-Redmineの構成" class="headerlink" title="Docker Redmineの構成"></a>Docker Redmineの構成</h1><h2 id="構成情報"><a href="#構成情報" class="headerlink" title="構成情報"></a>構成情報</h2><ul>
<li>ホストPC: Alpine Standard 3.18.5 (Hyper-V上で稼働)<br>  追加でインストールしたパッケージは次の通り  <ul>
<li>git</li>
<li>docker</li>
<li>docker-compose</li>
</ul>
</li>
<li>Redmineイメージ: redmine:5.1.1-alpine3.18</li>
<li>MySQLイメージ: mysql:5.7</li>
<li>Redmineのテーマ: RedmineUP A1</li>
<li>Redmineのプラグイン: happy-se-life&#x2F;kanban</li>
</ul>
<h2 id="docker-compose-ymlの内容"><a href="#docker-compose-ymlの内容" class="headerlink" title="docker-compose.ymlの内容"></a>docker-compose.ymlの内容</h2><p>今回作成した docker-compose.yml は下記のものになります。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redmine:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redmine:5.1.1-alpine3.18</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redmine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">REDMINE_DB_MYSQL:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">REDMINE_DB_USERNAME:</span> <span class="string">redmine_db_user</span></span><br><span class="line">      <span class="attr">REDMINE_DB_PASSWORD:</span> <span class="string">redmine_db_password</span></span><br><span class="line">      <span class="attr">REDMINE_DB_DATABASE:</span> <span class="string">redmine</span></span><br><span class="line">      <span class="attr">REDMINE_DB_ENCODING:</span> <span class="string">utf8mb4</span></span><br><span class="line">      <span class="attr">REDMINE_DB_PORT:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redmine-files:/usr/src/redmine/files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redmine-plugins:/usr/src/redmine/plugins</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redmine-themes:/usr/src/redmine/public/themes</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">SuperPassword1234</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">redmine</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">redmine_db_user</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">redmine_db_password</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql-data:/var/lib/mysql/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mysqld</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">redmine-files:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redmine-files</span></span><br><span class="line">    <span class="attr">redmine-plugins:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redmine-plugins</span></span><br><span class="line">    <span class="attr">redmine-themes:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">redmine-themes</span></span><br><span class="line">    <span class="attr">mysql-data:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mysql-data</span></span><br></pre></td></tr></table></figure>

<p>なるべく少ないハードウェアリソースで動作してほしかったので、ホストもRedmineコンテナもAlpineにしました。<br>実際に軽量で動いてくれているのかはよくわかりませんが、2コア、2GBメモリーで動いているので問題なしとしています。</p>
<p>文字コードはutf8mb4を指定しないと、日本語でエラーが出たので設定しました。</p>
<p>environment 周りはデフォルトと同じ値をセットしている部分もあり、省略できるのですが、何を設定したのか忘れそうだったので書きました。</p>
<h1 id="プラグインとテーマのインストール手順"><a href="#プラグインとテーマのインストール手順" class="headerlink" title="プラグインとテーマのインストール手順"></a>プラグインとテーマのインストール手順</h1><p>GithubのREADMEには書かなかったのですが、プラグインとテーマのインストール手順を記録しておきます。</p>
<h2 id="kanbanプラグインのインストール手順"><a href="#kanbanプラグインのインストール手順" class="headerlink" title="kanbanプラグインのインストール手順"></a>kanbanプラグインのインストール手順</h2><ol>
<li>通常ユーザーにはDockerのVolume領域の権限が無いので、Super Userになっておきます。</li>
<li>Redmine の Plugins フォルダに移動します。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd /var/lib/docker/volumes/redmine-plugins/_data</span><br></pre></td></tr></table></figure></li>
<li>kanban プラグインをクローンします。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git clone https://github.com/happy-se-life/kanban.git</span><br></pre></td></tr></table></figure>
git をインストールしてない場合は、zipでダウンロードしてunzipしてください。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wget https://codeload.github.com/happy-se-life/kanban/zip/refs/heads/master -O kanban.zip</span><br><span class="line"># unzip kanban.zip</span><br><span class="line"># mv kanban-master /var/lib/docker/volumes/redmine-plugins/_data/kanban</span><br></pre></td></tr></table></figure></li>
<li>Redmine をリスタートします。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="A1テーマのインストール手順"><a href="#A1テーマのインストール手順" class="headerlink" title="A1テーマのインストール手順"></a>A1テーマのインストール手順</h2><ol>
<li>RedmineUPのサイトから無料ダウンロードします。<ul>
<li><a href="https://www.redmineup.com/pages/ja/themes/a1">https://www.redmineup.com/pages/ja/themes/a1</a><br> アカウント登録してダウンロードリンクをメールで受け取ります。</li>
</ul>
</li>
<li>scp などでホストのAlpineへ転送します。</li>
<li>Redmine の Theme フォルダへコピーします。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r a1 /var/lib/docker/volumes/redmine-themes/_data</span><br></pre></td></tr></table></figure></li>
<li>Redmine をリスタートします。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>
 プラグインと違って、テーマはRedmineを再起動しなくても読み込まれる模様ですが、<br> あまりよくわかっていません・・・。</li>
</ol>
<h1 id="やり残したこと"><a href="#やり残したこと" class="headerlink" title="やり残したこと"></a>やり残したこと</h1><p>いくつかやりたいことがあるので、そのうち続きを書こうと思います。</p>
<ul>
<li>RedmineのHTTPS対応</li>
<li>自動バックアップ</li>
<li>バックアップからのリストア</li>
<li>Redmineのバージョンアップ</li>
<li>MySQLのバージョンアップ</li>
<li>Redmineのトラッカーやカスタムフィールドやステータス設定をコード化</li>
</ul>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redmine</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerを使ったRedmine環境のMySQLをバージョンアップした</title>
    <url>/2024/02/07/docker-redmine-update/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>以前の記事(<a href="/2023/02/25/docker-install/" title="Dockerを使ったRedmine環境の構築">Dockerを使ったRedmine環境の構築</a>)で構築したRedmineのMySQLをバージョンアップしてみました。</p>
<p>当初はMySQL5.7を使いましたが、今回MySQL8.3.0へバージョンアップしたので、その時のことを記録として残します。</p>
<h1 id="今回やったこと"><a href="#今回やったこと" class="headerlink" title="今回やったこと"></a>今回やったこと</h1><ul>
<li>docker-compose.yml の変更</li>
<li>コンテナを更新</li>
<li>Githubのコード更新とバージョンリリース</li>
</ul>
<h1 id="成果物"><a href="#成果物" class="headerlink" title="成果物"></a>成果物</h1><p>今回作成した成果物をGithubで公開しています。</p>
<ul>
<li><a href="https://github.com/hiroaki-ma1203/docker-redmine-install/tree/v1.0.0">https://github.com/hiroaki-ma1203/docker-redmine-install/tree/v1.0.0</a></li>
</ul>
<h1 id="docker-compose-yml-の変更"><a href="#docker-compose-yml-の変更" class="headerlink" title="docker-compose.yml の変更"></a>docker-compose.yml の変更</h1><p>1行だけですが、以下の部分を変更しました。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  mysql:</span><br><span class="line"><span class="deletion">-   image: mysql:5.7</span></span><br><span class="line"><span class="addition">+   image: mysql:8.3.0</span></span><br><span class="line">    container_name: mysql</span><br></pre></td></tr></table></figure>


<h1 id="コンテナを更新"><a href="#コンテナを更新" class="headerlink" title="コンテナを更新"></a>コンテナを更新</h1><p>docker-compose でコンテナを更新しました。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>コマンド実行後は数分の間 Redmine にアクセスできなくなり、ログを確認すると MySQL のバージョンアップ処理中でした（当たり前ですが・・・）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f mysql</span><br></pre></td></tr></table></figure>
<p>以下のようなログが出ます。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-02-06T10:24:44.236571Z 5 [System] [MY-013381] [Server] Server upgrade from &#x27;50700&#x27; to &#x27;80300&#x27; started.</span><br><span class="line">2024-02-06T10:26:38.807725Z 5 [System] [MY-013381] [Server] Server upgrade from &#x27;50700&#x27; to &#x27;80300&#x27; completed.</span><br></pre></td></tr></table></figure>

<p>バージョンアップが完了したら、今まで通り使えることを確認しました。</p>
<h1 id="Githubのコード更新とバージョンリリース"><a href="#Githubのコード更新とバージョンリリース" class="headerlink" title="Githubのコード更新とバージョンリリース"></a>Githubのコード更新とバージョンリリース</h1><p>今回は初めての更新ということもあり、折角なのでバージョンリリースをしてみました。</p>
<p>参考にしたのは、 <a href="https://semver.org/lang/ja/">Semantic Versioning 2.0.0</a> です。</p>
<p>MySQL5.7を使用していた時のものには “v0.1.0” というタグを付けて “0.1.0” としてリリースし、今回の更新版には “v1.0.0” というタグをつけて “1.0.0” としてリリースしました。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redmine</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Certified DevOps Engineer - Professional (DOP-C02) の学習</title>
    <url>/2024/08/02/aws-dopc02-training/</url>
    <content><![CDATA[<p>AWS Certified DevOps Engineer - Professional (DOP-C02) 試験の学習用にリンクをまとめたものです。</p>
<span id="more"></span>

<h1 id="AWS-Certified-DevOps-Engineer-Professional-DOP-C02-Exam-Guide"><a href="#AWS-Certified-DevOps-Engineer-Professional-DOP-C02-Exam-Guide" class="headerlink" title="AWS Certified DevOps Engineer - Professional (DOP-C02) Exam Guide"></a>AWS Certified DevOps Engineer - Professional (DOP-C02) Exam Guide</h1><ul>
<li>公式ガイド<br><a href="https://d1.awsstatic.com/ja_JP/training-and-certification/docs-devops-pro/AWS-Certified-DevOps-Engineer-Professional_Exam-Guide.pdf">AWS Certified DevOps Engineer - Professional (DOP-C02) Exam Guide
</a></li>
</ul>
<h2 id="この試験で検証する知識と能力"><a href="#この試験で検証する知識と能力" class="headerlink" title="この試験で検証する知識と能力"></a>この試験で検証する知識と能力</h2><ul>
<li>AWSでの分散システムおよびサービスのプロビジョン、運用、および管理についての技術的な専門知識</li>
<li>AWSでの継続的デリバリーシステムとその配信方法を実装および管理する</li>
<li>セキュリティコントロール、ガバナンスプロセス、コンプライアンス検証を実装および自動化する</li>
<li>AWSでのモニタリング、メトリクス、ロギングシステムを定義およびデプロイする</li>
<li>AWSでの可用性、スケーラビリティ、自己修復性の高いシステムを実装する</li>
<li>運用プロセスを自動化するためのツールを設計、管理、および保守する。</li>
</ul>
<h2 id="ホワイトペーパーとよくある質問"><a href="#ホワイトペーパーとよくある質問" class="headerlink" title="ホワイトペーパーとよくある質問"></a>ホワイトペーパーとよくある質問</h2><p>試験に関連するAWSのホワイトペーパーとよくある質問を詳しく確認し、AWSサービスとベストプラクティスについて理解を深めておく。</p>
<p>ホワイトペーパー</p>
<ul>
<li><a href="https://docs.aws.amazon.com/ja_jp/whitepapers/latest/running-containerized-microservices/welcome.html">Running Containerized Microservices on AWS</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/whitepapers/latest/introduction-devops-aws/infrastructure-as-code.html">Infrastructure as Code</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/whitepapers/latest/disaster-recovery-workloads-on-aws/disaster-recovery-workloads-on-aws.html">AWS でのワークロードの災害対策: クラウド内での復旧</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/whitepapers/latest/aws-multi-region-fundamentals/aws-multi-region-fundamentals.html">AWS マルチリージョンの基礎</a></li>
</ul>
<p>よくある質問</p>
<ul>
<li>Auto Scaling</li>
<li>Elastic Load Balancing</li>
<li>AWS Elastic Beanstalk</li>
<li>Amazon CloudWatch</li>
<li>Amazon EventBridge</li>
</ul>
<p>その他のリソース</p>
<ul>
<li><a href="https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/what-is-sam.html">AWS Serverless Application Model (AWS SAM) とは</a></li>
<li><a href="https://aws.amazon.com/jp/blogs/apn/implementing-serverless-tiering-strategies-with-aws-lambda-reserved-concurrency/">Implementing Serverless Tiering Strategies with AWS Lambda Reserved Concurrency</a></li>
</ul>
<h2 id="試験内容"><a href="#試験内容" class="headerlink" title="試験内容"></a>試験内容</h2><p>コンテンツ分野と重み設定</p>
<ul>
<li>第1分野: SDLC のオートメーション (採点対象コンテンツの 22%)</li>
<li>第2分野: 設定管理と IaC (採点対象コンテンツの 17%)</li>
<li>第3分野: 耐障害性の高いクラウドソリューション (採点対象コンテンツの 15%)</li>
<li>第4分野: モニタリングとロギング (採点対象コンテンツの 15%)</li>
<li>第5分野: インシデントとイベントへの対応 (採点対象コンテンツの 14%)</li>
<li>第6分野: セキュリティとコンプライアンス (採点対象コンテンツの 17%)</li>
</ul>
<h2 id="第1分野-SDLC-のオートメーション"><a href="#第1分野-SDLC-のオートメーション" class="headerlink" title="第1分野: SDLC のオートメーション"></a>第1分野: SDLC のオートメーション</h2><h3 id="第1分野-1-CI-CD-パイプラインを実装する"><a href="#第1分野-1-CI-CD-パイプラインを実装する" class="headerlink" title="第1分野-1: CI&#x2F;CD パイプラインを実装する"></a>第1分野-1: CI&#x2F;CD パイプラインを実装する</h3><p>対象知識:</p>
<ul>
<li>ソフトウェア開発ライフサイクル (SDLC) の概念、フェーズ、モデル</li>
<li>シングルアカウントとマルチアカウント環境のパイプラインデプロイパターン</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>コード、イメージ、アーティファクトリポジトリの設定</li>
<li>バージョン管理を使用してパイプラインをアプリケーション環境に統合</li>
<li>構築プロセスのセットアップ (AWS CodeBuild など)</li>
<li>構築とデプロイのシークレットの管理 (AWS Secrets Manager、AWS Systems Manager Parameter Store など)</li>
<li>適切なデプロイ戦略の決定 (AWS CodeDeploy など)</li>
</ul>
<h3 id="第1分野-2-自動テストを-CI-CD-パイプラインに統合する。"><a href="#第1分野-2-自動テストを-CI-CD-パイプラインに統合する。" class="headerlink" title="第1分野-2: 自動テストを CI&#x2F;CD パイプラインに統合する。"></a>第1分野-2: 自動テストを CI&#x2F;CD パイプラインに統合する。</h3><p>対象知識:</p>
<ul>
<li>各種テスト (単体テスト、統合テスト、受け入れテスト、ユーザーインターフェイステスト、セキュリティスキャンなど)</li>
<li>CI&#x2F;CD パイプラインの各段階でさまざまなタイプのテストを合理的に使用</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>プルリクエストまたはコードマージを生成するときに構築またはテストを実行 (AWS CodeCommit、CodeBuild など)</li>
<li>負荷&#x2F;ストレステスト、パフォーマンスベンチマーキング、アプリケーションテストを大規模環境で実行</li>
<li>アプリケーション終了コードに基づいてアプリケーションのヘルスを測定</li>
<li>単位テストとコードカバレッジの自動化</li>
<li>テストのためパイプラインでの AWS サービスの呼び出し</li>
</ul>
<h3 id="第1分野-3-アーティファクトを構築して管理する。"><a href="#第1分野-3-アーティファクトを構築して管理する。" class="headerlink" title="第1分野-3: アーティファクトを構築して管理する。"></a>第1分野-3: アーティファクトを構築して管理する。</h3><p>対象知識:</p>
<ul>
<li>アーティファクトのユースケースとセキュアな管理</li>
<li>アーティファクトを作成および生成するメソッド</li>
<li>アーティファクトのライフサイクルに関する注意事項</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>アーティファクトリポジトリの作成と設定 (AWS CodeArtifact、Amazon S3、Amazon Elastic Container Registry [Amazon ECR] など)</li>
<li>アーティファクトを生成する構築ツールの設定 (CodeBuild、AWS Lambda など)</li>
<li>Amazon EC2 インスタンスとコンテナイメージの構築プロセスの自動化 (EC2 Image Builder など)</li>
</ul>
<h3 id="第1分野-4-インスタンス、コンテナ、サーバーレス環境のデプロイ戦略を実装する。"><a href="#第1分野-4-インスタンス、コンテナ、サーバーレス環境のデプロイ戦略を実装する。" class="headerlink" title="第1分野-4: インスタンス、コンテナ、サーバーレス環境のデプロイ戦略を実装する。"></a>第1分野-4: インスタンス、コンテナ、サーバーレス環境のデプロイ戦略を実装する。</h3><p>対象知識:</p>
<ul>
<li>さまざまなプラットフォームのデプロイ方法 (Amazon EC2、Amazon Elastic Container Service [Amazon ECS]、Amazon Elastic Kubernetes Service [Amazon EKS]、Lambda など)</li>
<li>アプリケーションストレージパターン (Amazon Elastic File System [Amazon EFS]、Amazon S3、Amazon Elastic Block Store [Amazon EBS] など)</li>
<li>ミュータブルなデプロイパターンとイミュータブルなデプロイパターンの比較</li>
<li>コードの配布に使用できるツールとサービス (CodeDeploy、EC2 Image Builder など)</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>アーティファクトリポジトリへのアクセスを許可するセキュリティ権限の設定 (AWS Identity and Access Management [IAM]、CodeArtifact など)</li>
<li>デプロイメントエージェントの設定 (CodeDeploy エージェントなど)</li>
<li>デプロイに関する問題のトラブルシューティング</li>
<li>さまざまなデプロイ方法の使用 (blue&#x2F;green、Canary など)</li>
</ul>
<h3 id="第1分野の関連資料"><a href="#第1分野の関連資料" class="headerlink" title="第1分野の関連資料"></a>第1分野の関連資料</h3><ul>
<li><a href="https://aws.amazon.com/jp/devops/continuous-integration/">継続的インテグレーションとは?</a></li>
<li><a href="https://aws.amazon.com/jp/devops/continuous-delivery/">継続的デリバリーとは?</a></li>
<li><a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html">AWS CloudFormation の概要</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/high_availability_origin_failover.html">CloudFront オリジンフェイルオーバーを使用して高可用性を最適化する</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html">CloudFront Lambda@Edge を使用してエッジでカスタマイズする</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/codepipeline/latest/userguide/best-practices.html">CodePipeline ベストプラクティスとユースケース</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline.html">CodePipeline を使用した継続的デリバリー</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/codecommit/latest/userguide/welcome.html">AWS CodeCommit とは</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/elasticbeanstalk/latest/dg/Welcome.html">AWS Elastic Beanstalk とは?</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/welcome.html">Amazon API Gateway とは?</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/what-is-systems-manager.html">AWS Systems Manager とは?</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/Welcome.html">Amazon Elastic Container Service (ECS) とは</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/xray/latest/devguide/aws-xray.html">AWS X-Ray とは</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/codedeploy/latest/userguide/deployment-steps.html#deployment-steps-what-happens">CodeDeploy deployments</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html">CodeDeploy AppSpec の「フック」セクション</a></li>
</ul>
<h2 id="第2分野-設定管理と-IaC"><a href="#第2分野-設定管理と-IaC" class="headerlink" title="第2分野: 設定管理と IaC"></a>第2分野: 設定管理と IaC</h2><ul>
<li><h3 id="第2分野-1-クラウドインフラストラクチャと再利用可能なコンポーネントを定義して、ライフサイクル全体でシステムをプロビジョンおよび管理する。"><a href="#第2分野-1-クラウドインフラストラクチャと再利用可能なコンポーネントを定義して、ライフサイクル全体でシステムをプロビジョンおよび管理する。" class="headerlink" title="第2分野-1: クラウドインフラストラクチャと再利用可能なコンポーネントを定義して、ライフサイクル全体でシステムをプロビジョンおよび管理する。"></a>第2分野-1: クラウドインフラストラクチャと再利用可能なコンポーネントを定義して、ライフサイクル全体でシステムをプロビジョンおよび管理する。</h3></li>
</ul>
<p>対象知識:</p>
<ul>
<li>AWS の Infrastructure as Code (IaC) のオプションとツール</li>
<li>IaC ベースのプラットフォームの変更管理プロセス</li>
<li>設定管理サービスと戦略</li>
</ul>
<p>対象スキル:</p>
<ul>
<li><p>IaC テンプレートの作成とデプロイ (AWS Serverless Application Model [AWS SAM]、AWS CloudFormation、AWS Cloud Development Kit [AWS CDK] など)</p>
</li>
<li><p>CloudFormation StackSets を複数のアカウントと複数の AWS リージョンに適用</p>
</li>
<li><p>最適な設定管理サービスを決定 (AWS OpsWorks、AWS Systems Manager、AWS Config、AWS AppConfig など)</p>
</li>
<li><p>インフラストラクチャのパターン、ガバナンスコントロール、セキュリティ標準を再利用可能な IaC テンプレート (AWS Service Catalog、CloudFormation モジュール、AWS CDK など) に実装</p>
</li>
<li><h3 id="第2分野-2-オートメーションをデプロイして、マルチアカウント環境またはマルチリージョン環境で-AWS-アカウントを作成、オンボーディング、保護する。"><a href="#第2分野-2-オートメーションをデプロイして、マルチアカウント環境またはマルチリージョン環境で-AWS-アカウントを作成、オンボーディング、保護する。" class="headerlink" title="第2分野-2: オートメーションをデプロイして、マルチアカウント環境またはマルチリージョン環境で AWS アカウントを作成、オンボーディング、保護する。"></a>第2分野-2: オートメーションをデプロイして、マルチアカウント環境またはマルチリージョン環境で AWS アカウントを作成、オンボーディング、保護する。</h3></li>
</ul>
<p>対象知識:</p>
<ul>
<li>AWS アカウント構造、ベストプラクティス、および関連する AWS サービス</li>
</ul>
<p>対象スキル:</p>
<ul>
<li><p>アカウントのプロビジョンと設定の標準化と自動化</p>
</li>
<li><p>アカウントの作成、統合、および一元管理 (AWS Organizations、AWS Control Tower など)</p>
</li>
<li><p>複数アカウントや複雑な組織構造 (SCP、ロールを引き受けるなど) に IAM ソリューションを適用</p>
</li>
<li><p>大規模環境でのガバナンスとセキュリティコントロールの実装と開発 (AWS Config、AWS Control Tower、AWS Security Hub、Amazon Detective、Amazon GuardDuty、AWS Service Catalog、SCP)</p>
</li>
<li><h3 id="第2分野-3-複雑なタスクや大規模環境向けの自動化ソリューションを設計および構築する。"><a href="#第2分野-3-複雑なタスクや大規模環境向けの自動化ソリューションを設計および構築する。" class="headerlink" title="第2分野-3: 複雑なタスクや大規模環境向けの自動化ソリューションを設計および構築する。"></a>第2分野-3: 複雑なタスクや大規模環境向けの自動化ソリューションを設計および構築する。</h3></li>
</ul>
<p>対象知識:</p>
<ul>
<li>タスクとプロセスを自動化する AWS のサービスとソリューション</li>
<li>AWS ソフトウェア定義インフラストラクチャとのインタラクション方法と戦略</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>システムインベントリ、設定、およびパッチ管理の自動化 (Systems Manager、AWS Config など)</li>
<li>複雑なシナリオ (AWS SDK、Lambda、AWS Step Functions など) 向けに Lambda 関数オートメーションを開発</li>
<li>ソフトウェアアプリケーションを希望の状態に自動設定 (OpsWorks、Systems Manager ステートマネージャーなど)</li>
<li>ソフトウェアコンプライアンスの維持 (Systems Manager など)</li>
</ul>
<h3 id="第2分野の関連資料"><a href="#第2分野の関連資料" class="headerlink" title="第2分野の関連資料"></a>第2分野の関連資料</h3><ul>
<li><a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html">AWS Serverless Application Model (AWS SAM) とは</a></li>
<li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html">Amazon DynamoDB とは</a></li>
<li><a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html">AWS Secrets Manager とは</a></li>
<li><a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#reference-appspec-file-structure-environment-variable-availability">AWS CodeDeploy で使える フック</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html#field-level-encryption-setting-up">Amazon CloudFront フィールドレベル暗号化の設定</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-aliases.html">Lambda 関数のエイリアスの作成</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-hybrid-multicloud.html">ハイブリッドおよびマルチクラウド環境での Systems Manager の利用</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/application-discovery/latest/userguide/what-is-appdiscovery.html">AWS Application Discovery Service とは</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.advantages">Amazon Aurora Global Database の利点</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Replication.CrossRegion.html">AWS リージョン 間での Amazon Aurora MySQL DB クラスターのレプリケーション</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/logs/AnalyzingLogData.html">CloudWatch Logs Insights を使用したログデータの分析</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/organizations/latest/userguide/orgs_manage_ous.html">AWS Organizations による組織単位の管理</a></li>
<li><a href="https://docs.aws.amazon.com/ja_jp/config/latest/developerguide/WhatIsConfig.html">AWS Config とは</a></li>
</ul>
<h2 id="第3分野-耐障害性の高いクラウドソリューション"><a href="#第3分野-耐障害性の高いクラウドソリューション" class="headerlink" title="第3分野: 耐障害性の高いクラウドソリューション"></a>第3分野: 耐障害性の高いクラウドソリューション</h2><h3 id="第3分野-1-耐障害性とビジネス要件を満たす高可用性ソリューションを実装する。"><a href="#第3分野-1-耐障害性とビジネス要件を満たす高可用性ソリューションを実装する。" class="headerlink" title="第3分野-1: 耐障害性とビジネス要件を満たす高可用性ソリューションを実装する。"></a>第3分野-1: 耐障害性とビジネス要件を満たす高可用性ソリューションを実装する。</h3><p>対象知識:</p>
<ul>
<li>マルチ AZ およびマルチリージョンデプロイ (コンピューティングレイヤー、データレイヤーなど)</li>
<li>SLA</li>
<li>ステートフルサービスのためのレプリケーションとフェイルオーバーの方法</li>
<li>高可用性を実現する手法 (マルチ AZ、マルチリージョンなど)</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>ビジネス要件を技術的耐障害性のニーズに変換</li>
<li>既存のワークロードで単一障害点を特定して修正</li>
<li>利用可能な場合はクロスリージョンソリューションを有効化 (Amazon DynamoDB、Amazon RDS、Amazon Route 53、Amazon S3、Amazon CloudFront など)</li>
<li>クロス AZ サービスをサポートするためにロードバランシングを設定</li>
<li>ダウンタイムを最小限に抑えながら、複数のアベイラビリティーゾーンとリージョンをサポートするようにアプリケーションと関連サービスを設定</li>
</ul>
<h3 id="第3分野-2-ビジネス要件を満たすスケーラブルなソリューションを実装する。"><a href="#第3分野-2-ビジネス要件を満たすスケーラブルなソリューションを実装する。" class="headerlink" title="第3分野-2: ビジネス要件を満たすスケーラブルなソリューションを実装する。"></a>第3分野-2: ビジネス要件を満たすスケーラブルなソリューションを実装する。</h3><p>対象知識:</p>
<ul>
<li>サービスをスケーリングするための適切なメトリクス</li>
<li>疎結合および分散アーキテクチャ</li>
<li>サーバーレスアーキテクチャ</li>
<li>コンテナプラットフォーム</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>スケーリングに関する問題を特定して修正</li>
<li>適切なオートスケーリング、ロードバランシング、およびキャッシュソリューションを特定して実装</li>
<li>コンテナベースのアプリケーション (Amazon ECS、Amazon EKS など) のデプロイ</li>
<li>複数のリージョンにワークロードをデプロイしてグローバルなスケーラビリティを実現</li>
<li>サーバーレスアプリケーションの設定 (Amazon API Gateway、Lambda、AWS Fargate など)</li>
</ul>
<h3 id="第3分野-3-RTO-要件と-RPO-要件を満たす自動復旧プロセスを実装する。"><a href="#第3分野-3-RTO-要件と-RPO-要件を満たす自動復旧プロセスを実装する。" class="headerlink" title="第3分野-3: RTO 要件と RPO 要件を満たす自動復旧プロセスを実装する。"></a>第3分野-3: RTO 要件と RPO 要件を満たす自動復旧プロセスを実装する。</h3><p>対象知識:</p>
<ul>
<li>災害対策の概念 (RTO、RPO など)</li>
<li>バックアップと復旧戦略 (パイロットライト、ウォームスタンバイなど)</li>
<li>復旧手順</li>
</ul>
<p>対象スキル:</p>
<ul>
<li>マルチ AZ とマルチリージョンのワークロード (Amazon RDS、Amazon Aurora、Route 53、CloudFront など) のフェイルオーバーのテスト</li>
<li>適切なリージョン間バックアップとリカバリ戦略 (AWS Backup、Amazon S3、Systems Manager など) の特定と実装</li>
<li>バックエンドの障害から復旧するためのロードバランサーの設定</li>
</ul>
<h3 id="第3分野の関連資料"><a href="#第3分野の関連資料" class="headerlink" title="第3分野の関連資料"></a>第3分野の関連資料</h3><ul>
<li>工事中</li>
</ul>
<h2 id="第4分野-モニタリングとロギング"><a href="#第4分野-モニタリングとロギング" class="headerlink" title="第4分野: モニタリングとロギング"></a>第4分野: モニタリングとロギング</h2><h3 id="第4分野-1-ログとメトリクスの収集、集計、および保存を設定する。"><a href="#第4分野-1-ログとメトリクスの収集、集計、および保存を設定する。" class="headerlink" title="第4分野-1: ログとメトリクスの収集、集計、および保存を設定する。"></a>第4分野-1: ログとメトリクスの収集、集計、および保存を設定する。</h3><p>対象知識:</p>
<ul>
<li>アプリケーションとインフラストラクチャをモニタリングする方法</li>
<li>Amazon CloudWatch メトリクス (名前空間、メトリクス、ディメンション、解像度など)</li>
<li>リアルタイムのログ取り込み</li>
<li>保存中および転送中のログとメトリクスの暗号化オプション (クライアント側とサーバー側、AWS Key Management Service [AWS KMS] など)</li>
<li>セキュリティ設定 (ログ収集を許可する IAM ロールや権限など)</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>ログをセキュアに保存して管理</li>
<li>メトリクスフィルターを使用してログイベントから CloudWatch メトリクスを作成</li>
<li>CloudWatch メトリクスストリームの作成 (Amazon S3 または Amazon Kinesis Data Firehose オプションなど)</li>
<li>カスタムメトリクスの収集 (CloudWatch エージェントの使用など)</li>
<li>ログストレージライフサイクルの管理 (S3 ライフサイクル、CloudWatch Log グループの保持など)</li>
<li>CloudWatch Log サブスクリプションを使用してログデータを処理 (Kinesis、Lambda、Amazon OpenSearch Service など)</li>
<li>フィルターとパターン構文または CloudWatch Logs Insights を使用してログデータを検索</li>
<li>ログデータの暗号化の設定 (AWS KMS など)</li>
</ul>
<h3 id="第4分野-2-ログとメトリクスを監査、モニタリング、分析して問題を検出する。"><a href="#第4分野-2-ログとメトリクスを監査、モニタリング、分析して問題を検出する。" class="headerlink" title="第4分野-2: ログとメトリクスを監査、モニタリング、分析して問題を検出する。"></a>第4分野-2: ログとメトリクスを監査、モニタリング、分析して問題を検出する。</h3><p>対象知識:</p>
<ul>
<li>異常検出アラーム (CloudWatch 異常検知など)</li>
<li>一般的な CloudWatch メトリクスとログ (Amazon EC2 の CPU 使用率、Amazon RDS でのキュー長、Application Load Balancer (ALB) の 5xx エラーなど)</li>
<li>Amazon Inspector と一般的な評価テンプレート</li>
<li>AWS Config ルール</li>
<li>AWS CloudTrail ログイベント</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>CloudWatch ダッシュボードと Amazon QuickSight ビジュアライゼーションの構築</li>
<li>CloudWatch アラームと CloudWatch メトリクス (標準およびカスタム) との関連付け</li>
<li>さまざまなサービス (コンテナ、API Gateway、Lambda など) 用に AWS XRay を設定 </li>
<li>リアルタイムログストリームの分析 (Kinesis Data Streams の使用など)</li>
<li>AWS のサービスでのログの分析 (Amazon Athena、CloudWatch Logs Insights など)</li>
</ul>
<h3 id="第4分野-3-複雑な環境のモニタリングとイベント管理を自動化する。"><a href="#第4分野-3-複雑な環境のモニタリングとイベント管理を自動化する。" class="headerlink" title="第4分野-3: 複雑な環境のモニタリングとイベント管理を自動化する。"></a>第4分野-3: 複雑な環境のモニタリングとイベント管理を自動化する。</h3><p>対象知識:</p>
<ul>
<li>イベント駆動型の非同期設計パターン (S3 イベント通知または Amazon Simple Notification Service [Amazon SNS] または Lambda に対する Amazon EventBridge イベントなど)</li>
<li>さまざまな AWS サービスのオートスケーリング機能 (EC2 Auto Scaling グループ、RDS ストレージオートスケーリング、DynamoDB、ECS キャパシティープロバイダー、EKS オートスケーラーなど)</li>
<li>アラート通知とアクション機能 (Amazon SNS、Lambda、EC2 の自動復旧に対する CloudWatch アラームなど)</li>
<li>AWS サービスのヘルスチェック機能 (ALB ターゲットグループ、Route 53 など)</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>オートスケーリングのソリューションの設定 (DynamoDB、EC2 Auto Scaling グループ、RDS ストレージのオートスケーリング、ECS キャパシティープロバイダーなど)</li>
<li>CloudWatch カスタムメトリクスとメトリクスフィルター、アラーム、通知 (Amazon SNS、Lambda など) の作成</li>
<li>ログファイルを処理し (例えば Lambda を使用)、ログファイルを (OpenSearch Service、CloudWatch Logs などの) 別の送信先に配信するように S3 イベントを設定</li>
<li>特定のイベントパターンに基づいて通知を送信するように EventBridge を設定</li>
<li>EC2 インスタンスにエージェントをインストールして設定 (AWS Systems Manager Agent [SSM Agent]、CloudWatch エージェントなど)</li>
<li>問題を修復するために AWS Config ルールを設定</li>
<li>ヘルスチェックを設定 (Route 53、ALB など)</li>
</ul>
<h3 id="第4分野の関連資料"><a href="#第4分野の関連資料" class="headerlink" title="第4分野の関連資料"></a>第4分野の関連資料</h3><ul>
<li>工事中</li>
</ul>
<h2 id="第5分野-インシデントとイベントへの対応"><a href="#第5分野-インシデントとイベントへの対応" class="headerlink" title="第5分野: インシデントとイベントへの対応"></a>第5分野: インシデントとイベントへの対応</h2><h3 id="第5分野-1-イベントソースを管理して、イベントを処理、通知し、イベントに応じてアクションを実行する。"><a href="#第5分野-1-イベントソースを管理して、イベントを処理、通知し、イベントに応じてアクションを実行する。" class="headerlink" title="第5分野-1: イベントソースを管理して、イベントを処理、通知し、イベントに応じてアクションを実行する。"></a>第5分野-1: イベントソースを管理して、イベントを処理、通知し、イベントに応じてアクションを実行する。</h3><p>対象知識:</p>
<ul>
<li>イベントを生成、キャプチャ、処理する AWS のサービス (AWS Health、EventBridge、CloudTrail など)</li>
<li>イベント駆動型アーキテクチャ (ファンアウト、イベントストリーミング、キューイングなど)</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>AWS イベントソースの統合 (AWS Health、EventBridge、CloudTrail など)</li>
<li>イベント処理ワークフローの構築 (Amazon Simple Queue Service [Amazon SQS]、Kinesis, Amazon SNS, Lambda, Step Functions など)</li>
</ul>
<h3 id="第5分野-2-イベントに応じて設定の変更を実装する。"><a href="#第5分野-2-イベントに応じて設定の変更を実装する。" class="headerlink" title="第5分野-2: イベントに応じて設定の変更を実装する。"></a>第5分野-2: イベントに応じて設定の変更を実装する。</h3><p>対象知識:</p>
<ul>
<li>フリート管理サービス (Systems Manager、AWS Auto Scaling など)</li>
<li>設定管理サービス (AWS Config など)</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>設定の変更をシステムに適用</li>
<li>イベントに応じたインフラストラクチャ設定の変更</li>
<li>望ましくないシステム状態の修復</li>
</ul>
<h3 id="第5分野-3-システムとアプリケーションの障害をトラブルシューティングする。"><a href="#第5分野-3-システムとアプリケーションの障害をトラブルシューティングする。" class="headerlink" title="第5分野-3: システムとアプリケーションの障害をトラブルシューティングする。"></a>第5分野-3: システムとアプリケーションの障害をトラブルシューティングする。</h3><p>対象知識:</p>
<ul>
<li>AWS メトリクスとロギングサービス (CloudWatch、X-Ray など)</li>
<li>AWS サービスのヘルスサービス (AWS Health, CloudWatch, Systems Manager OpsCenter など)</li>
<li>根本原因分析</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>失敗したデプロイの分析 (AWS CodePipeline、CodeBuild、CodeDeploy、CloudFormation、CloudWatch 模擬モニタリングなど)</li>
<li>失敗したプロセスに関するインシデントの分析 (オートスケーリング、Amazon ECS、Amazon EKS など)</li>
</ul>
<h3 id="第5分野の関連資料"><a href="#第5分野の関連資料" class="headerlink" title="第5分野の関連資料"></a>第5分野の関連資料</h3><ul>
<li>工事中</li>
</ul>
<h2 id="第6分野-セキュリティとコンプライアンス"><a href="#第6分野-セキュリティとコンプライアンス" class="headerlink" title="第6分野: セキュリティとコンプライアンス"></a>第6分野: セキュリティとコンプライアンス</h2><h3 id="第6分野-1-Identity-and-Access-Management-の手法を大規模環境に実装する。"><a href="#第6分野-1-Identity-and-Access-Management-の手法を大規模環境に実装する。" class="headerlink" title="第6分野-1: Identity and Access Management の手法を大規模環境に実装する。"></a>第6分野-1: Identity and Access Management の手法を大規模環境に実装する。</h3><p>対象知識:</p>
<ul>
<li>人間とマシンのアクセスに対するさまざまな IAM エンティティ (ユーザー、グループ、ロール、ID プロバイダー、ID ベースのポリシー、リソースベースのポリシー、セッションポリシーなど) の適切な使用</li>
<li>ID フェデレーション手法 (IAM ID プロバイダーと AWS IAM アイデンティティセンター [AWS Single Sign-On] の使用など)</li>
<li>IAM アクセス許可の境界を使用したアクセス許可管理の委任</li>
<li>組織 SCP</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>最小権限アクセスを強制するポリシーの設計</li>
<li>ロールベースおよび属性ベースのアクセス制御パターンの実装</li>
<li>マシン ID (Secrets Manager など) の認証情報ローテーションの自動化</li>
<li>人間とマシン ID へのアクセスを制御するアクセス許可の管理 (多要素認証 [MFA]、AWS Security Token Service [AWS STS]、IAM プロファイルの有効化など)</li>
</ul>
<h3 id="第6分野-2-セキュリティコントロールとデータ保護のオートメーションを適用する。"><a href="#第6分野-2-セキュリティコントロールとデータ保護のオートメーションを適用する。" class="headerlink" title="第6分野-2: セキュリティコントロールとデータ保護のオートメーションを適用する。"></a>第6分野-2: セキュリティコントロールとデータ保護のオートメーションを適用する。</h3><p>対象知識:</p>
<ul>
<li>ネットワークセキュリティコンポーネント (セキュリティグループ、ネットワーク ACL、ルーティング、AWS Network Firewall、AWS WAF、AWS Shield など)</li>
<li>証明書とパブリックキーインフラストラクチャ (PKI)</li>
<li>データ管理 (データ分類、暗号化、キー管理、アクセスコントロールなど)</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>マルチアカウント環境とマルチリージョン環境におけるセキュリティコントロール適用の  自動化 (Security Hub、Organizations、AWS Control Tower、Systems Manager など)</li>
<li>セキュリティコントロールを組み合わせた多層防御の適用 (AWS Certificate Manager [ACM]、AWS WAF、AWS Config、AWS Config ルール、Security Hub、GuardDuty、セキュリティグループ、ネットワーク ACL、Amazon Detective、Network Firewall など)</li>
<li>大規模環境における機密データの検出の自動化 (Amazon Macie など)</li>
<li>転送中のデータと保存中のデータの暗号化 (AWS KMS、AWS CloudHSM、ACM など)</li>
</ul>
<h3 id="第6分野-3-セキュリティモニタリングおよび監査ソリューションを実装する。"><a href="#第6分野-3-セキュリティモニタリングおよび監査ソリューションを実装する。" class="headerlink" title="第6分野-3: セキュリティモニタリングおよび監査ソリューションを実装する。"></a>第6分野-3: セキュリティモニタリングおよび監査ソリューションを実装する。</h3><p>対象知識:</p>
<ul>
<li>セキュリティモニタリングサービスと機能 (CloudTrail、AWS Config、VPC フローログ、CloudFormation ドリフト検出など)</li>
<li>セキュリティの脆弱性とイベントを特定するための AWS のサービス (GuardDuty、Amazon Inspector、IAM Access Analyzer、AWS Config など)</li>
<li>一般的なクラウドセキュリティの脅威 (セキュアでないウェブトラフィック、公開された AWS アクセスキー、パブリックアクセスが有効か、または暗号化が無効な S3 バケットなど）</li>
</ul>
<p> 対象スキル:</p>
<ul>
<li>堅牢なセキュリティ監査の実装</li>
<li>予期しない、または異常なセキュリティイベントに基づくアラートの設定</li>
<li>サービスとアプリケーションのロギングの設定 (CloudTrail、CloudWatch Logs など)</li>
<li>ログ、メトリクス、セキュリティ結果の分析</li>
</ul>
<h3 id="第6分野の関連資料"><a href="#第6分野の関連資料" class="headerlink" title="第6分野の関連資料"></a>第6分野の関連資料</h3><ul>
<li>工事中</li>
</ul>
]]></content>
      <categories>
        <category>資格</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Serverインストールから KVM/QEMU + Cockpit での仮想環境構築までの道のり</title>
    <url>/2025/03/16/ubuntu-cockpit-vm-setup/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Ubuntu Server 24.04.01 (minimum)へCockpitをインストールして仮想環境を構築したので、備忘録としてその時のメモ。</p>
<p>以前はWindows10を入れてHyper-vで仮想環境を立てていたのですが、データ用のHDDが壊れて使えなくなりました。<br>仕方がないのでリセットするのですが、Windows10はサポート終了するためLinux系OSに変更しようと思い、<br>普段使っているUbuntuを入れることにしました。</p>
<span id="more"></span>

<h1 id="参考にしたサイト"><a href="#参考にしたサイト" class="headerlink" title="参考にしたサイト"></a>参考にしたサイト</h1><p>参考にしたサイトは下記です。手順はほぼ同一ですが追加でコマンド実行した部分がありました。</p>
<ul>
<li><a href="https://qiita.com/ku_suke/items/269dfecec398187aed77">Ubuntuにkvm&#x2F;QEMUをいれてCockpitで快適に仮想マシンサーバを運用してみる</a></li>
</ul>
<p>上記サイトからリンクされている以下のサイトも参考にしました。</p>
<ul>
<li><a href="https://www.linuxtechi.com/how-to-install-kvm-on-ubuntu-22-04/">How to Install KVM on Ubuntu 22.04 Step-by-Step</a></li>
</ul>
<h1 id="ホストPCについて"><a href="#ホストPCについて" class="headerlink" title="ホストPCについて"></a>ホストPCについて</h1><h2 id="スペック"><a href="#スペック" class="headerlink" title="スペック"></a>スペック</h2><p>かなり古いPCですが、現役で使っています。</p>
<ul>
<li>筐体: Shuttle DS61 V1.1</li>
<li>CPU: Intel Core i5-3470S</li>
<li>メモリー: 32GB</li>
<li>ディスク: 256GB</li>
</ul>
<h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><p>Ubuntuを普段使っているので今回も採用しました。</p>
<ul>
<li>OS: Ubuntu Server 24.04.01</li>
</ul>
<h2 id="Ubuntu-Server-24-04-01-をホストPCへインストール"><a href="#Ubuntu-Server-24-04-01-をホストPCへインストール" class="headerlink" title="Ubuntu Server 24.04.01 をホストPCへインストール"></a>Ubuntu Server 24.04.01 をホストPCへインストール</h2><p><a href="https://jp.ubuntu.com/download">Ubuntu 公式</a> からISOイメージをダウンロードし、<br><a href="https://rufus.ie/ja/">Rufus</a>などを使用して起動可能なUSBメモリーを作成し、ホストPCへインストールします。</p>
<p>インストールの途中で minimum を選択してインストールしました。<br>この記事の説明はこの状態から開始します。</p>
<h2 id="ボリュームを拡張"><a href="#ボリュームを拡張" class="headerlink" title="ボリュームを拡張"></a>ボリュームを拡張</h2><p>先の紹介したサイトでも記載されていますが、論理ボリュームはインストーラーのデフォルトだと100GBになっていたので最大まで拡張しました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 確認</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">lsblk</span><br><span class="line"><span class="comment"># 拡張</span></span><br><span class="line"><span class="built_in">sudo</span> lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line"><span class="built_in">sudo</span> resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</span><br><span class="line"><span class="comment"># 確認</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><h3 id="システムを最新の状態に更新"><a href="#システムを最新の状態に更新" class="headerlink" title="システムを最新の状態に更新"></a>システムを最新の状態に更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure>

<h3 id="vimをインストール"><a href="#vimをインストール" class="headerlink" title="vimをインストール"></a>vimをインストール</h3><p>minimum でインストールしたら入ってなかったので入れておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y vim</span><br></pre></td></tr></table></figure>

<h2 id="KVM-QEMU-Cockpit-cockpit-machines-をインストール"><a href="#KVM-QEMU-Cockpit-cockpit-machines-をインストール" class="headerlink" title="KVM&#x2F;QEMU + Cockpit + cockpit-machines をインストール"></a>KVM&#x2F;QEMU + Cockpit + cockpit-machines をインストール</h2><h3 id="KVM-QEMU-のインストール"><a href="#KVM-QEMU-のインストール" class="headerlink" title="KVM&#x2F;QEMU のインストール"></a>KVM&#x2F;QEMU のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils</span><br></pre></td></tr></table></figure>

<h3 id="libvirt-の起動と自動起動設定"><a href="#libvirt-の起動と自動起動設定" class="headerlink" title="libvirt の起動と自動起動設定"></a>libvirt の起動と自動起動設定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now libvirtd</span><br></pre></td></tr></table></figure>

<p>libvirtdが起動してない場合はstartします。(自分の環境では勝手に起動してました)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start libvirtd</span><br></pre></td></tr></table></figure>

<h3 id="KVM-の有効性を確認"><a href="#KVM-の有効性を確認" class="headerlink" title="KVM の有効性を確認"></a>KVM の有効性を確認</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> kvm-ok</span><br></pre></td></tr></table></figure>

<p><code>KVM acceleration can be used</code> と表示されれば問題なし。</p>
<h3 id="kvmグループにユーザを追加"><a href="#kvmグループにユーザを追加" class="headerlink" title="kvmグループにユーザを追加"></a>kvmグループにユーザを追加</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG kvm <span class="variable">$USER</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG libvirt <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h3 id="Cockpit-のインストールと自動起動設定"><a href="#Cockpit-のインストールと自動起動設定" class="headerlink" title="Cockpit のインストールと自動起動設定"></a>Cockpit のインストールと自動起動設定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y cockpit cockpit-machines</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now cockpit</span><br></pre></td></tr></table></figure>

<h3 id="Cockpit-の-WebUI-にアクセスして確認"><a href="#Cockpit-の-WebUI-にアクセスして確認" class="headerlink" title="Cockpit の WebUI にアクセスして確認"></a>Cockpit の WebUI にアクセスして確認</h3><p>ここまでで Cockpit が起動しているはずなので確認します。</p>
<p>ブラウザで以下の URL にアクセスしてログイン：<br><code>https://&lt;UbuntuサーバーのIP&gt;:9090</code></p>
<h2 id="仮想ネットワークの設定"><a href="#仮想ネットワークの設定" class="headerlink" title="仮想ネットワークの設定"></a>仮想ネットワークの設定</h2><p>ネットワーク管理をNetworkManagerに変更します。<br>※netplanとどちらを使うのが良いのか理解できていませんが、うまく動いたほうを選択しました。</p>
<h3 id="現状確認"><a href="#現状確認" class="headerlink" title="現状確認"></a>現状確認</h3><p>環境によって変わると思いますが、Shuttle DS61 V1.1はNICが2個あるので、<br><code>enp3s0</code>と<code>enp5s0</code>の2個が表示されました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli device</span><br></pre></td></tr></table></figure>

<p>以下のように表示されます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEVICE  TYPE      STATE      CONNECTION </span><br><span class="line">virbr0  bridge    unmanaged  --         </span><br><span class="line">enp3s0  ethernet  unmanaged  --         </span><br><span class="line">enp5s0  ethernet  unmanaged  --         </span><br><span class="line">lo      loopback  unmanaged  --  </span><br></pre></td></tr></table></figure>

<h3 id="ネットワーク管理をNetworkManagerに変更-修正済み"><a href="#ネットワーク管理をNetworkManagerに変更-修正済み" class="headerlink" title="ネットワーク管理をNetworkManagerに変更(修正済み)"></a>ネットワーク管理をNetworkManagerに変更(修正済み)</h3><p>以前の記事では、&#x2F;etc&#x2F;netplan&#x2F;50-cloud-init.yaml を直接編集する方法を紹介していましたが、<br>これは cloud-init によって再生成される可能性があるため、推奨される方法ではありませんでした。<br>以下のように、&#x2F;etc&#x2F;netplan&#x2F;00-installer-config.yaml を新たに作成し、<br>cloud-init のネットワーク設定を無効化するのが安全な方法のようです。</p>
<p>設定ファイルを新規作成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/netplan/00-installer-config.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">network:</span></span><br><span class="line"><span class="string">  renderer: NetworkManager</span></span><br><span class="line"><span class="string">  version: 2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>cloud-init による自動設定を無効化し、既存の cloud-init の設定を削除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/cloud/cloud.cfg.d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;network: &#123;config: disabled&#125;&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -f /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure>

<p>設定反映</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 600 /etc/netplan/00-installer-config.yaml</span><br><span class="line"><span class="built_in">sudo</span> netplan generate</span><br><span class="line"><span class="built_in">sudo</span> netplan apply</span><br></pre></td></tr></table></figure>

<details> <summary> 過去に紹介していた方法（参考までに）</summary>

<p>  この方法は、cloud-init によってファイルが再生成されるリスクがあります。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure>

  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">network:</span><br><span class="line"><span class="comment">#    ethernets:</span></span><br><span class="line"><span class="comment">#        enp3s0:</span></span><br><span class="line"><span class="comment">#            dhcp4: true</span></span><br><span class="line">  renderer: NetworkManager</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure>

</details>

<h3 id="ネットワークインターフェースをNetworkManager管理に変更する"><a href="#ネットワークインターフェースをNetworkManager管理に変更する" class="headerlink" title="ネットワークインターフェースをNetworkManager管理に変更する"></a>ネットワークインターフェースをNetworkManager管理に変更する</h3><p>NetworkManagerが <code>/etc/network/interfaces</code>で設定されたネットワークインターフェースを<br>管理する設定になっていることを確認します。<br>managed&#x3D;trueならそのまま、falseになっている場合はtrueに変更します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure>

<p>以下のように表示されます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile</span><br><span class="line"></span><br><span class="line">[ifupdown]</span><br><span class="line">managed=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[device]</span><br><span class="line">wifi.scan-rand-mac-address=no</span><br></pre></td></tr></table></figure>

<p>私の環境では<code>false</code>になっていたので変更しました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/managed=false/managed=true/&#x27;</span> /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure>

<p>再度確認します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure>

<p>変更されました</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">plugins=ifupdown,keyfile</span><br><span class="line"></span><br><span class="line">[ifupdown]</span><br><span class="line">managed=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[device]</span><br><span class="line">wifi.scan-rand-mac-address=no</span><br></pre></td></tr></table></figure>

<p>設定変更を反映します</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> netplan apply</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart NetworkManager</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now cockpit</span><br></pre></td></tr></table></figure>

<p>設定が反映されたか確認します</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli device</span><br></pre></td></tr></table></figure>

<p><code>unmanaged</code>と表示されていたのが<code>connected</code>に変わっていました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEVICE  TYPE      STATE                   CONNECTION         </span><br><span class="line">enp3s0  ethernet  connected               Wired connection 1 </span><br><span class="line">lo      loopback  connected (externally)  lo                 </span><br><span class="line">virbr0  bridge    connected (externally)  virbr0             </span><br><span class="line">enp5s0  ethernet  unavailable             --       </span><br></pre></td></tr></table></figure>

<p>うまく反映されない場合はOSを再起動すると反映されるかもしれません。<br>※私の環境の場合はOSを再起動しないと反映されませんでした、なぜなのかよくわかりません。</p>
<h3 id="Cockpitから仮想ブリッジを設定する"><a href="#Cockpitから仮想ブリッジを設定する" class="headerlink" title="Cockpitから仮想ブリッジを設定する"></a>Cockpitから仮想ブリッジを設定する</h3><p>※この作業は既存のネットワークからbridgeネットワークに切り替わるため、DHCP環境ではIPアドレスが変わりますのでご注意ください。</p>
<p>CockpitのWebUIへログインし、ネットワーキングメニュー画面のインターフェースから<code>ブリッジの追加</code>ボタンを選択します。</p>
<img src="/2025/03/16/ubuntu-cockpit-vm-setup/ubuntu-cockpit-vm-setup-001.png" class="">

<p>今回使用する<code>enp3s0</code>を選択します。</p>
<img src="/2025/03/16/ubuntu-cockpit-vm-setup/ubuntu-cockpit-vm-setup-002.png" class="">

<p>そして<code>追加</code>をするとネットワークが切り替わりますので、IPアドレスを確認して再度Cockpitの画面を開きなおします。</p>
<img src="/2025/03/16/ubuntu-cockpit-vm-setup/ubuntu-cockpit-vm-setup-003.png" class="">

<p>変更後のIPアドレスを確認して再度Cockpitへログインすると<code>br0</code>というインターフェースが追加されました。<br>仮想マシンは、この<code>br0</code>を使用してネットワークへ接続することになります。</p>
<h2 id="仮想マシンを作成しOSをインストール"><a href="#仮想マシンを作成しOSをインストール" class="headerlink" title="仮想マシンを作成しOSをインストール"></a>仮想マシンを作成しOSをインストール</h2><p>仮想マシンを作成していきます。</p>
<h3 id="OSのISOイメージをダウンロード"><a href="#OSのISOイメージをダウンロード" class="headerlink" title="OSのISOイメージをダウンロード"></a>OSのISOイメージをダウンロード</h3><p>仮想マシン用のインストールに使用するISOイメージを適当な場所に保存します。<br>今回は Ubuntu 22.04.01 Server をインストールしてみます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://releases.ubuntu.com/24.04.1/ubuntu-24.04.1-live-server-amd64.iso</span><br><span class="line"><span class="built_in">cp</span> ubuntu-24.04.1-live-server-amd64.iso /tmp/</span><br></pre></td></tr></table></figure>

<h3 id="CockpitのWebUIから仮想マシンを作成"><a href="#CockpitのWebUIから仮想マシンを作成" class="headerlink" title="CockpitのWebUIから仮想マシンを作成"></a>CockpitのWebUIから仮想マシンを作成</h3><p>以下の手順で仮想マシンを作成します</p>
<ol>
<li>Cockpit にログイン (https:&#x2F;&#x2F;&lt;UbuntuサーバーのIP&gt;:9090)</li>
<li><code>仮想マシン</code>メニューを開く</li>
<li><code>仮想マシンの作成</code>ボタンをクリック</li>
<li><code>接続</code>は<code>System</code>を選択</li>
<li>VMの名前、メモリ、CPU、ストレージを設定</li>
<li>インストールメディアとして <code>ubuntu-22.04-live-server-amd64.iso</code> を選択</li>
<li><code>作成して編集する</code>ボタンをクリック</li>
</ol>
<p>仮想マシンが作成されました</p>
<img src="/2025/03/16/ubuntu-cockpit-vm-setup/ubuntu-cockpit-vm-setup-004.png" class="">

<p>仮想マシンの名前部分をクリックすると各仮想マシンの画面に遷移しますので、<br>ネットワークインターフェースを確認し、<code>br0</code>になっていない場合は変更してください。</p>
<p>仮想マシンを起動すると、画面の右側の<code>コンソール</code>に画面が表示されるので、画面上でOSのインストールを進めます。</p>
<img src="/2025/03/16/ubuntu-cockpit-vm-setup/ubuntu-cockpit-vm-setup-005.png" class="">

<h3 id="仮想マシンのスナップショットを作成"><a href="#仮想マシンのスナップショットを作成" class="headerlink" title="仮想マシンのスナップショットを作成"></a>仮想マシンのスナップショットを作成</h3><p>仮想マシンの画面の下のほうにある<code>スナップショット</code>から、<code>スナップショットの作成</code>をクリックして作成できます。</p>
<img src="/2025/03/16/ubuntu-cockpit-vm-setup/ubuntu-cockpit-vm-setup-006.png" class="">

<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>KVM&#x2F;QEMU と Cockpit を使用して仮想マシンを作成できました。<br>netplanで設定すると仮想マシンがネットワークに接続できなかったり、<br>仮想マシンを作成するときに<code>System</code>ではなく<code>User session</code>を選択すると、<br>ネットワークに<code>br0</code>を選択できなかったりなど、色々と模索しながらでしたが、<br>なんとか仮想環境を復旧することができました。</p>
<p>以前の環境は突然壊れてしまったので、今後は、定期的なスナップショットの作成やNAS等への外部バックアップやリストアなどにも取り組んでいきたいと考えています。</p>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>Ubuntu</category>
        <category>KVM</category>
        <category>仮想環境</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>環境構築</tag>
        <tag>Cockpit</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>ネストされたAWS SAM アプリケーションのサンプル  その1</title>
    <url>/2025/03/20/aws-sam-nested-sample-1/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>AWS SAM を使用して、ネストされたスタックのサンプルを作成してみました。<br>S3 → EventBridge → Lambda の流れで、S3 にオブジェクトを作成したイベントを使って Lambda をトリガーします。  </p>
<p>新規にS3を作成する場合は、通知先のSQSも同時に作れば簡単に連携できるのですが、既存の S3 にイベントを追加したい場合、<br><a href="https://repost.aws/ja/knowledge-center/cloudformation-s3-notification-lambda">手間が多そうだった</a>ので、 EventBridge を使用してみることにしました。</p>
<span id="more"></span>

<h1 id="作ったもの"><a href="#作ったもの" class="headerlink" title="作ったもの"></a>作ったもの</h1><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>以下のリポジトリで公開しています。</p>
<ul>
<li><a href="https://github.com/hiroaki-ma1203/aws-sam-samples/tree/main/nested-sam-app-1">GitHub リポジトリ</a></li>
</ul>
<h2 id="プロジェクト構造"><a href="#プロジェクト構造" class="headerlink" title="プロジェクト構造"></a>プロジェクト構造</h2><p>アプリケーションは、次の 3 つの SAM テンプレートで構成されます。</p>
<ol>
<li><code>template.yaml</code> : ネストされたスタックをオーケストレーションするメインテンプレート。</li>
<li><code>s3-eventbridge-template.yaml</code> : S3 バケットと EventBridge のカスタムイベントバスを作成し、<br> default イベントバスからカスタムイベントバスへの転送ルールを定義。</li>
<li><code>lambda-template.yaml</code> : トリガーされる Lambda 関数を定義。</li>
</ol>
<h2 id="アーキテクチャ"><a href="#アーキテクチャ" class="headerlink" title="アーキテクチャ"></a>アーキテクチャ</h2><p>S3, EventBridge, Lambda, および必要な IAM Role となります。</p>
<ol>
<li>S3 Bucket を作成します。<ul>
<li>S3 には、ファイルアップロード時に S3 イベントを Amazon EventBridge へ送信するよう設定します。</li>
<li>このイベント通知は Default event busへ送信されます。</li>
</ul>
</li>
<li>Custom event busを作成します。<ul>
<li>EventBridge にルールを設定し、 Default event bus から、Custom event busへイベントを転送するようルール設定します。</li>
</ul>
</li>
<li>Lambda 関数を作成します。<ul>
<li>Custom event bus にイベントを Lambda 関数へルーティングするようルールを設定します。</li>
</ul>
</li>
</ol>
<h2 id="構成図"><a href="#構成図" class="headerlink" title="構成図"></a>構成図</h2><img src="/2025/03/20/aws-sam-nested-sample-1/architecture.drawio.png" class="">

<h1 id="各テンプレートの開設"><a href="#各テンプレートの開設" class="headerlink" title="各テンプレートの開設"></a>各テンプレートの開設</h1><h2 id="template-yaml"><a href="#template-yaml" class="headerlink" title="template.yaml"></a>template.yaml</h2><p>ネストされたスタックをオーケストレーションするメインテンプレートです。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="string">&#x27;2010-09-09&#x27;</span></span><br><span class="line"><span class="attr">Transform:</span> <span class="string">AWS::Serverless-2016-10-31</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">&#x27;Root template that nests S3/EventBridge and Lambda templates&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">S3EventBridgeStack:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::CloudFormation::Stack</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">TemplateURL:</span> <span class="string">s3-eventbridge-template.yaml</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">LambdaStack:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::CloudFormation::Stack</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">TemplateURL:</span> <span class="string">lambda-template.yaml</span></span><br><span class="line">      <span class="attr">Parameters:</span></span><br><span class="line">        <span class="attr">EventBusName:</span> <span class="type">!GetAtt</span> <span class="string">S3EventBridgeStack.Outputs.EventBusName</span></span><br><span class="line">        <span class="attr">S3BucketName:</span> <span class="type">!GetAtt</span> <span class="string">S3EventBridgeStack.Outputs.S3BucketName</span></span><br><span class="line">    <span class="attr">DependsOn:</span> <span class="string">S3EventBridgeStack</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Outputs:</span></span><br><span class="line">  <span class="attr">S3BucketName:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;Name of the created S3 bucket&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!GetAtt</span> <span class="string">S3EventBridgeStack.Outputs.S3BucketName</span></span><br><span class="line">  <span class="attr">EventBusName:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;Name of the created EventBridge bus&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!GetAtt</span> <span class="string">S3EventBridgeStack.Outputs.EventBusName</span></span><br><span class="line">  <span class="attr">LambdaFunctionArn:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;ARN of the created Lambda function&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!GetAtt</span> <span class="string">LambdaStack.Outputs.LambdaFunctionArn</span></span><br></pre></td></tr></table></figure>

<h3 id="S3EventBridgeStack"><a href="#S3EventBridgeStack" class="headerlink" title="S3EventBridgeStack"></a>S3EventBridgeStack</h3><p>このリソースで S3 と EventBridge の Custom event bus を作成します。</p>
<h3 id="LambdaStack"><a href="#LambdaStack" class="headerlink" title="LambdaStack"></a>LambdaStack</h3><p>このリソースで Lambda 関数を作成します。<br>Custom event bus の名前をパラメータとして渡すのは、トリガーを設定する必要があるためです。<br>S3 バケット名をパラメータとして渡すのは、Lambda 関数にバケットへのアクセス権を設定するためです。</p>
<h2 id="s3-eventbridge-template-yaml"><a href="#s3-eventbridge-template-yaml" class="headerlink" title="s3-eventbridge-template.yaml"></a>s3-eventbridge-template.yaml</h2><p>S3 bucket と Custom event bus および、 Default event bus からの転送するルールを設定するテンプレートです。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="string">&#x27;2010-09-09&#x27;</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">&#x27;Template to create S3 bucket and EventBridge bus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">MyS3Bucket:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">&#x27;AWS::S3::Bucket&#x27;</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">BucketName:</span> <span class="type">!Sub</span> <span class="string">&#x27;nested-sam-app-1-s3-$&#123;AWS::AccountId&#125;-$&#123;AWS::Region&#125;&#x27;</span></span><br><span class="line">      <span class="attr">NotificationConfiguration:</span></span><br><span class="line">        <span class="attr">EventBridgeConfiguration:</span></span><br><span class="line">          <span class="attr">EventBridgeEnabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">MyEventBus:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">&#x27;AWS::Events::EventBus&#x27;</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">Name:</span> <span class="string">&#x27;nested-sam-app-1-event-bus&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Add new rule to default event bus that forward PutObject events from default bus to custom bus</span></span><br><span class="line">  <span class="attr">ForwardS3PutObjectRule:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">&#x27;AWS::Events::Rule&#x27;</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">EventBusName:</span> <span class="string">&#x27;default&#x27;</span>  <span class="comment"># This specifies the default event bus</span></span><br><span class="line">      <span class="attr">EventPattern:</span></span><br><span class="line">        <span class="attr">source:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">aws.s3</span></span><br><span class="line">        <span class="attr">detail-type:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;Object Created&#x27;</span></span><br><span class="line">        <span class="attr">detail:</span></span><br><span class="line">          <span class="attr">bucket:</span></span><br><span class="line">            <span class="attr">name:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">MyS3Bucket</span></span><br><span class="line">      <span class="attr">State:</span> <span class="string">&#x27;ENABLED&#x27;</span></span><br><span class="line">      <span class="attr">Targets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Arn:</span> <span class="type">!GetAtt</span> <span class="string">MyEventBus.Arn</span></span><br><span class="line">          <span class="attr">Id:</span> <span class="string">&quot;ForwardToMyS3EventBus&quot;</span></span><br><span class="line">          <span class="attr">RoleArn:</span> <span class="type">!GetAtt</span> <span class="string">ForwardEventRole.Arn</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># IAM role to allow EventBridge to put events on the custom bus</span></span><br><span class="line">  <span class="attr">ForwardEventRole:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">&#x27;AWS::IAM::Role&#x27;</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">AssumeRolePolicyDocument:</span></span><br><span class="line">        <span class="attr">Version:</span> <span class="string">&#x27;2012-10-17&#x27;</span></span><br><span class="line">        <span class="attr">Statement:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">            <span class="attr">Principal:</span></span><br><span class="line">              <span class="attr">Service:</span> <span class="string">events.amazonaws.com</span></span><br><span class="line">            <span class="attr">Action:</span> <span class="string">&#x27;sts:AssumeRole&#x27;</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">PolicyName:</span> <span class="string">&#x27;nested-sam-app-1-allow-put-event-to-bus&#x27;</span></span><br><span class="line">          <span class="attr">PolicyDocument:</span></span><br><span class="line">            <span class="attr">Version:</span> <span class="string">&#x27;2012-10-17&#x27;</span></span><br><span class="line">            <span class="attr">Statement:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">Effect:</span> <span class="string">Allow</span></span><br><span class="line">                <span class="attr">Action:</span> <span class="string">&#x27;events:PutEvents&#x27;</span></span><br><span class="line">                <span class="attr">Resource:</span> <span class="type">!GetAtt</span> <span class="string">MyEventBus.Arn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Outputs:</span></span><br><span class="line">  <span class="attr">S3BucketName:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;Name of the created S3 bucket&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!Ref</span> <span class="string">MyS3Bucket</span></span><br><span class="line">  <span class="attr">EventBusName:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;Name of the created EventBridge bus&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!Ref</span> <span class="string">MyEventBus</span></span><br><span class="line">  <span class="attr">EventBusArn:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;ARN of the created EventBridge bus&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!GetAtt</span> <span class="string">MyEventBus.Arn</span></span><br></pre></td></tr></table></figure>

<h3 id="MyS3Bucket"><a href="#MyS3Bucket" class="headerlink" title="MyS3Bucket"></a>MyS3Bucket</h3><p>S3 から EventBridge へのイベント通知を有効にするため、以下のパラメータを設定します。<br><code>EventBridgeEnabled: true</code></p>
<p>これにより、この S3 バケットのイベントが Default event bus へ通知されます。</p>
<h3 id="MyEventBus"><a href="#MyEventBus" class="headerlink" title="MyEventBus"></a>MyEventBus</h3><p>Custom event bus を作成します。</p>
<h3 id="ForwardS3PutObjectRule"><a href="#ForwardS3PutObjectRule" class="headerlink" title="ForwardS3PutObjectRule"></a>ForwardS3PutObjectRule</h3><p>Default event bus から Custom event bus へ、イベント通知を転送するルールを設定します。<br><code>EventPattern</code> の <code>source</code> で S3 のイベント通知に限定します。<br><code>detail-type</code> で <code>Object Created</code> に絞り、<code>detail</code> で今回作成したバケットのイベントのみ転送する設定をします。</p>
<h3 id="ForwardEventRole"><a href="#ForwardEventRole" class="headerlink" title="ForwardEventRole"></a>ForwardEventRole</h3><p>Default event bus から Custom event bus へのアクセス許可を設定します。</p>
<h2 id="lambda-template-yaml"><a href="#lambda-template-yaml" class="headerlink" title="lambda-template.yaml"></a>lambda-template.yaml</h2><p>Lambda 関数と Custom event bus へトリガーを設定するテンプレートです。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="string">&#x27;2010-09-09&#x27;</span></span><br><span class="line"><span class="attr">Transform:</span> <span class="string">AWS::Serverless-2016-10-31</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">&#x27;Template to create Lambda function triggered by S3 events via EventBridge&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Parameters:</span></span><br><span class="line">  <span class="attr">EventBusName:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">String</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;Name of the EventBridge bus&#x27;</span></span><br><span class="line">  <span class="attr">S3BucketName:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">String</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;Name of the S3 bucket&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line">  <span class="attr">MyLambdaFunction:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">AWS::Serverless::Function</span></span><br><span class="line">    <span class="attr">Properties:</span></span><br><span class="line">      <span class="attr">FunctionName:</span> <span class="string">&#x27;nested-sam-app-1-function&#x27;</span></span><br><span class="line">      <span class="attr">CodeUri:</span> <span class="string">./src/</span></span><br><span class="line">      <span class="attr">Handler:</span> <span class="string">app.lambda_handler</span></span><br><span class="line">      <span class="attr">Runtime:</span> <span class="string">python3.11</span></span><br><span class="line">      <span class="attr">Policies:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">S3ReadPolicy:</span></span><br><span class="line">            <span class="attr">BucketName:</span> <span class="type">!Ref</span> <span class="string">S3BucketName</span></span><br><span class="line">      <span class="attr">Events:</span></span><br><span class="line">        <span class="attr">S3ObjectCreated:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">EventBridgeRule</span></span><br><span class="line">          <span class="attr">Properties:</span></span><br><span class="line">            <span class="attr">EventBusName:</span> <span class="type">!Ref</span> <span class="string">EventBusName</span></span><br><span class="line">            <span class="attr">Pattern:</span></span><br><span class="line">              <span class="attr">source:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">aws.s3</span></span><br><span class="line">              <span class="attr">detail-type:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">&#x27;Object Created&#x27;</span></span><br><span class="line">              <span class="attr">detail:</span></span><br><span class="line">                <span class="attr">bucket:</span></span><br><span class="line">                  <span class="attr">name:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="type">!Ref</span> <span class="string">S3BucketName</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Outputs:</span></span><br><span class="line">  <span class="attr">LambdaFunctionArn:</span></span><br><span class="line">    <span class="attr">Description:</span> <span class="string">&#x27;ARN of the created Lambda function&#x27;</span></span><br><span class="line">    <span class="attr">Value:</span> <span class="type">!GetAtt</span> <span class="string">MyLambdaFunction.Arn</span></span><br></pre></td></tr></table></figure>

<h3 id="MyLambdaFunction"><a href="#MyLambdaFunction" class="headerlink" title="MyLambdaFunction"></a>MyLambdaFunction</h3><p>Lanbda 関数を作成します。<br><code>Events</code> でトリガーを今回作成した Custom event bus からの通知に設定しています。</p>
<h1 id="サンプルの使用方法"><a href="#サンプルの使用方法" class="headerlink" title="サンプルの使用方法"></a>サンプルの使用方法</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>このサンプルを実行するには、以下の権限およびツールが必要です。</p>
<ul>
<li>適切な権限を持つ AWS アカウント</li>
<li>AWS CLI</li>
<li>AWS SAM CLI</li>
</ul>
<h2 id="デプロイ方法"><a href="#デプロイ方法" class="headerlink" title="デプロイ方法"></a>デプロイ方法</h2><p>このアプリケーションをデプロイする手順は以下のようになります。</p>
<ol>
<li><p>このリポジトリをクローンします。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hiroaki-ma1203/aws-sam-samples.git</span><br><span class="line"><span class="built_in">cd</span> aws-sam-samples/nested-sam-app-1</span><br></pre></td></tr></table></figure>
</li>
<li><p>SAM アプリケーションをビルドします。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sam build</span><br></pre></td></tr></table></figure>
</li>
<li><p>SAM アプリケーションをデプロイします。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sam deploy --guided</span><br></pre></td></tr></table></figure>

<p>指示に従ってデプロイメント構成を設定します。</p>
</li>
</ol>
<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><ul>
<li>デプロイ後、作成された S3 バケットにファイルをアップロードしてください。</li>
<li>発生した S3 イベントは、EventBridge を介して Lambda 関数をトリガーします。</li>
<li>AWS コンソールまたは CloudWatch Logs を通じて Lambda 関数の実行結果を確認してください。</li>
</ul>
<h2 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h2><p>必要に応じて、テンプレートや Lambda 関数の実装を変更してください。</p>
<ul>
<li><code>template.yaml</code> : ネストされたスタックを追加や変更する場合は、メインのテンプレートを変更。</li>
<li><code>s3-eventbridge-template.yaml</code> : S3 バケット設定や EventBridge ルールを変更（例: ファイル削除時にもイベント通知するなど）。</li>
<li><code>lambda-template.yaml</code> : Lambda 関数のランタイムや構成を変更。</li>
<li><code>src/app.py</code> : Lambda 関数の実装を変更。</li>
</ul>
<h2 id="環境の削除"><a href="#環境の削除" class="headerlink" title="環境の削除"></a>環境の削除</h2><p>このアプリケーションによって作成されたすべてのリソースを削除するには、以下の操作を行ってください。</p>
<ol>
<li><p>S3 バケット内のファイルを削除します。</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">aws cloudformation describe-stacks \</span><br><span class="line">    --stack-name nested-sam-app-1 --query <span class="string">&quot;Stacks[0].Outputs[?OutputKey==&#x27;S3BucketName&#x27;].OutputValue&quot;</span> \</span><br><span class="line">    --output text \</span><br><span class="line">    | xargs -I &#123;&#125; aws s3 <span class="built_in">rm</span> s3://&#123;&#125; --recursive</span><br></pre></td></tr></table></figure>
</li>
<li><p>スタックを削除します。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sam delete</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>開発環境</category>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>AWS-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexoのメモ</title>
    <url>/2020/11/01/hello-world/</url>
    <content><![CDATA[<h2 id="Hexoの操作コマンド"><a href="#Hexoの操作コマンド" class="headerlink" title="Hexoの操作コマンド"></a>Hexoの操作コマンド</h2><h3 id="新規記事の作成"><a href="#新規記事の作成" class="headerlink" title="新規記事の作成"></a>新規記事の作成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="ドラフト記事の作成と、正式発行"><a href="#ドラフト記事の作成と、正式発行" class="headerlink" title="ドラフト記事の作成と、正式発行"></a>ドラフト記事の作成と、正式発行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;My New Draft Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>動作確認する場合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure>

<p>正式発効する場合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish draft <span class="string">&quot;My New Draft Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="サーバー動作確認"><a href="#サーバー動作確認" class="headerlink" title="サーバー動作確認"></a>サーバー動作確認</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>


<h3 id="静的サイトの生成"><a href="#静的サイトの生成" class="headerlink" title="静的サイトの生成"></a>静的サイトの生成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Framework</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
